{
  "version": 3,
  "sources": ["../close/lib/main.js", "../close/lib/sync.js", "../close/lib/index.js", "../exists/lib/async.js", "../exists/lib/sync.js", "../exists/lib/index.js", "../open/lib/defaults.json", "../open/lib/main.js", "../open/lib/sync.js", "../open/lib/index.js", "../read-dir/lib/async.js", "../read-dir/lib/sync.js", "../read-dir/lib/index.js", "../read-file/lib/main.js", "../read-file/lib/sync.js", "../read-file/lib/index.js", "../read-file-list/lib/config.json", "../read-file-list/lib/delay.js", "../read-file-list/lib/clear_timeout.js", "../read-file-list/lib/clear_pending.js", "../read-file-list/lib/async.js", "../read-file-list/lib/sync.js", "../read-file-list/lib/index.js", "../read-json/lib/async.js", "../read-json/lib/sync.js", "../read-json/lib/index.js", "../read-wasm/lib/async.js", "../read-wasm/lib/sync.js", "../read-wasm/lib/index.js", "../rename/lib/main.js", "../rename/lib/sync.js", "../rename/lib/index.js", "../resolve-parent-path/lib/validate.js", "../resolve-parent-path/lib/async.js", "../resolve-parent-path/lib/sync.js", "../resolve-parent-path/lib/index.js", "../resolve-parent-path-by/lib/validate.js", "../resolve-parent-path-by/lib/async.js", "../resolve-parent-path-by/lib/sync.js", "../resolve-parent-path-by/lib/index.js", "../unlink/lib/main.js", "../unlink/lib/sync.js", "../unlink/lib/index.js", "../write-file/lib/main.js", "../write-file/lib/sync.js", "../write-file/lib/index.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar native = require( 'fs' ).close;\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Asynchronously closes a file descriptor.\n*\n* @param {NonNegativeInteger} fd - file descriptor\n* @param {Function} clbk - callback to invoke after closing a file descriptor\n* @throws {TypeError} first argument must be a valid file descriptor (nonnegative integer)\n* @throws {TypeError} last argument must be a function\n*\n* @example\n* var openSync = require( '@stdlib/fs/open' ).sync;\n*\n* function done( error ) {\n*     if ( error ) {\n*         throw error;\n*     }\n* }\n*\n* var fd = openSync( __filename, 'r+' );\n* if ( fd instanceof Error ) {\n*     throw fd;\n* }\n*\n* close( fd, done );\n*/\nfunction close( fd, clbk ) { // eslint-disable-line stdlib/no-redeclare\n\tif ( !isNonNegativeInteger( fd ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a valid file descriptor (i.e., nonnegative integer). Value: `%s`.', fd ) );\n\t}\n\tif ( !isFunction( clbk ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Last argument must be a function. Value: `%s`.', clbk ) );\n\t}\n\tnative( fd, clbk );\n}\n\n\n// EXPORTS //\n\nmodule.exports = close;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar close = require( 'fs' ).closeSync; // eslint-disable-line node/no-sync, stdlib/no-redeclare\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Synchronously closes a file descriptor.\n*\n* @param {NonNegativeInteger} fd - file descriptor\n* @throws {TypeError} must provide a valid file descriptor (nonnegative integer)\n* @returns {(Error|void)} an error object or `undefined`\n*\n* @example\n* var openSync = require( '@stdlib/fs/open' ).sync;\n*\n* var fd = openSync( __filename, 'r+' );\n*\n* if ( fd instanceof Error ) {\n*     throw fd;\n* }\n*\n* var err = closeSync( fd );\n* if ( err instanceof Error ) {\n*     throw err;\n* }\n*/\nfunction closeSync( fd ) {\n\tif ( !isNonNegativeInteger( fd ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a valid file descriptor (i.e., a nonnegative integer). Value: `%s`.', fd ) );\n\t}\n\ttry {\n\t\tclose( fd );\n\t} catch ( err ) {\n\t\treturn err;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = closeSync;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Close a file descriptor.\n*\n* @module @stdlib/fs/close\n*\n* @example\n* var openSync = require( '@stdlib/fs/open' ).sync;\n* var close = require( '@stdlib/fs/close' );\n*\n* function done( error ) {\n*     if ( error ) {\n*         throw error;\n*     }\n* }\n*\n* var fd = openSync( __filename, 'r+' );\n* if ( fd instanceof Error ) {\n*     throw fd;\n* }\n*\n* close( fd, done );\n*\n* @example\n* var openSync = require( '@stdlib/fs/open' ).sync;\n* var closeSync = require( '@stdlib/fs/close' ).sync;\n*\n* var fd = openSync( __filename, 'r+' );\n*\n* if ( fd instanceof Error ) {\n*     throw fd;\n* }\n*\n* var err = closeSync( fd );\n* if ( err instanceof Error ) {\n*     throw err;\n* }\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar sync = require( './sync.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'sync', sync );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar fs = require( 'fs' );\n\n\n// FUNCTIONS //\n\nvar fcn;\nif ( typeof fs.access === 'function' ) {\n\tfcn = fs.access;\n} else {\n\tfcn = fs.stat;\n}\n\n\n// MAIN //\n\n/**\n* Tests whether a path exists on the filesystem.\n*\n* @param {(string|Buffer)} path - path to test\n* @param {Function} clbk - callback to invoke after testing path existence\n*\n* @example\n* exists( __dirname, done );\n*\n* function done( error, bool ) {\n*     if ( error ) {\n*         console.error( error );\n*     }\n*     if ( bool ) {\n*         console.log( '...path exists.' );\n*     } else {\n*         console.log( '...path does not exist.' );\n*     }\n* }\n*/\nfunction exists( path, clbk ) {\n\tfcn( path, done );\n\n\t/**\n\t* Callback invoked upon performing a filesystem call.\n\t*\n\t* @private\n\t* @param {(Error|null)} error - error object\n\t* @returns {void}\n\t*/\n\tfunction done( error ) {\n\t\tif ( clbk.length === 2 ) {\n\t\t\tif ( error ) {\n\t\t\t\treturn clbk( error, false );\n\t\t\t}\n\t\t\treturn clbk( null, true );\n\t\t}\n\t\tif ( error ) {\n\t\t\treturn clbk( false );\n\t\t}\n\t\treturn clbk( true );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = exists;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-sync */\n\n'use strict';\n\n// MODULES //\n\nvar fs = require( 'fs' );\n\n\n// FUNCTIONS //\n\nvar fcn;\nif ( typeof fs.accessSync === 'function' ) {\n\tfcn = fs.accessSync;\n} else {\n\tfcn = fs.statSync;\n}\n\n\n// MAIN //\n\n/**\n* Synchronously tests whether a path exists on the filesystem.\n*\n* @param {(string|Buffer)} path - path to test\n* @returns {boolean} boolean indicating whether the path exists\n*\n* @example\n* var bool = existsSync( __dirname );\n* // returns <boolean>\n*/\nfunction existsSync( path ) {\n\ttry {\n\t\tfcn( path );\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\treturn false;\n\t}\n\treturn true;\n}\n\n\n// EXPORTS //\n\nmodule.exports = existsSync;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test whether a path exists on the filesystem. For more information, see the [archive][1].\n*\n* [1]: https://github.com/nodejs/node-v0.x-archive/blob/d8baf8a2a4481940bfed0196308ae6189ca18eee/lib/fs.js#L222\n*\n* @module @stdlib/fs/exists\n*\n* @example\n* var exists = require( '@stdlib/fs/exists' );\n*\n* exists( __dirname, done );\n* exists( 'beepboop', done );\n*\n* function done( error, bool ) {\n*     if ( error ) {\n*         console.error( error.message );\n*     } else {\n*         console.log( bool );\n*     }\n* }\n*\n* @example\n* var existsSync = require( '@stdlib/fs/exists' ).sync;\n*\n* console.log( existsSync( __dirname ) );\n* // => true\n*\n* console.log( existsSync( 'beepboop' ) );\n* // => false\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar exists = require( './async.js' );\nvar sync = require( './sync.js' );\n\n\n// MAIN //\n\nsetReadOnly( exists, 'sync', sync );\n\n\n// EXPORTS //\n\nmodule.exports = exists;\n", "{\n\t\"flags\": \"r\",\n\t\"mode\": 438\n}\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar op = require( 'fs' ).open;\nvar defaults = require( './defaults.json' );\n\n\n// MAIN //\n\n/**\n* Asynchronously opens a file.\n*\n* @param {(string|Buffer)} path - file path\n* @param {(string|number)} [flags='r'] - file system flags\n* @param {integer} [mode=0o666] - file mode\n* @param {Function} clbk - callback to invoke after opening a file\n* @returns {void}\n*\n* @example\n* var closeSync = require( '@stdlib/fs/close' ).sync;\n* var open = require( '@stdlib/fs/open' );\n*\n* function onOpen( error, fd ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     closeSync( fd );\n* }\n* open( __filename, onOpen );\n*/\nfunction open( path, flags, mode, clbk ) { // eslint-disable-line stdlib/no-redeclare\n\tvar nargs = arguments.length;\n\tif ( nargs === 2 ) {\n\t\treturn op( path, defaults.flags, defaults.mode, flags );\n\t}\n\tif ( nargs === 3 ) {\n\t\treturn op( path, flags, defaults.mode, mode );\n\t}\n\top( path, flags, mode, clbk );\n}\n\n\n// EXPORTS //\n\nmodule.exports = open;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar open = require( 'fs' ).openSync; // eslint-disable-line node/no-sync, stdlib/no-redeclare\nvar defaults = require( './defaults.json' );\n\n\n// MAIN //\n\n/**\n* Synchronously opens a file.\n*\n* @param {(string|Buffer)} path - file path\n* @param {(string|number)} [flags='r'] - file system flags\n* @param {integer} [mode=0o666] - file mode\n* @returns {(integer|Error)} file descriptor or an error\n*\n* @example\n* var closeSync = require( '@stdlib/fs/close' ).sync;\n*\n* var fd = openSync( __filename );\n* if ( fd instanceof Error ) {\n*     throw fd;\n* }\n* closeSync( fd );\n*/\nfunction openSync( path, flags, mode ) {\n\tvar nargs;\n\tvar fd;\n\n\tnargs = arguments.length;\n\ttry {\n\t\tif ( nargs === 1 ) {\n\t\t\tfd = open( path, defaults.flags, defaults.mode );\n\t\t} else if ( nargs === 2 ) {\n\t\t\tfd = open( path, flags, defaults.mode );\n\t\t} else {\n\t\t\tfd = open( path, flags, mode );\n\t\t}\n\t} catch ( err ) {\n\t\treturn err;\n\t}\n\treturn fd;\n}\n\n\n// EXPORTS //\n\nmodule.exports = openSync;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Open a file.\n*\n* @module @stdlib/fs/open\n*\n* @example\n* var closeSync = require( '@stdlib/fs/close' ).sync;\n* var open = require( '@stdlib/fs/open' );\n*\n* function onOpen( error, fd ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     closeSync( fd );\n* }\n* open( __filename, onOpen );\n*\n* @example\n* var closeSync = require( '@stdlib/fs/close' ).sync;\n* var openSync = require( '@stdlib/fs/open' ).sync;\n*\n* var fd = openSync( __filename );\n* if ( fd instanceof Error ) {\n*     throw fd;\n* }\n* closeSync( fd );\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar sync = require( './sync.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'sync', sync );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar readdir = require( 'fs' ).readdir;\n\n\n// MAIN //\n\n/**\n* Asynchronously reads the contents of a directory.\n*\n* @param {(string|Buffer)} path - directory path\n* @param {Function} clbk - callback to invoke after reading directory contents\n*\n* @example\n* function onRead( error, data ) {\n*     if ( error ) {\n*         console.error( error );\n*     } else {\n*         console.log( data );\n*     }\n* }\n* readDir( __dirname, onRead );\n*/\nfunction readDir() {\n\tvar args;\n\tvar i;\n\targs = [];\n\tfor ( i = 0; i < arguments.length; i++ ) {\n\t\targs.push( arguments[ i ] );\n\t}\n\treaddir.apply( null, args );\n}\n\n\n// EXPORTS //\n\nmodule.exports = readDir;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar readdirSync = require( 'fs' ).readdirSync; // eslint-disable-line node/no-sync\n\n\n// MAIN //\n\n/**\n* Synchronously reads the contents of a directory.\n*\n* @param {(string|Buffer)} path - directory path\n* @returns {(StringArray|Error)} directory contents or an error\n*\n* @example\n* var out = readDirSync( __dirname );\n* if ( out instanceof Error ) {\n*     throw out;\n* }\n* console.log( out );\n*/\nfunction readDirSync( path ) {\n\ttry {\n\t\treturn readdirSync( path );\n\t} catch ( err ) {\n\t\treturn err;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = readDirSync;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Read the contents of a directory.\n*\n* @module @stdlib/fs/read-dir\n*\n* @example\n* var readDir = require( '@stdlib/fs/read-dir' );\n*\n* function onRead( error, data ) {\n*     if ( error ) {\n*         console.error( error );\n*     } else {\n*         console.log( data );\n*     }\n* }\n* readDir( __dirname, onRead );\n*\n* @example\n* var readDirSync = require( '@stdlib/fs/read-dir' ).sync;\n*\n* var out = readDirSync( __dirname );\n* if ( out instanceof Error ) {\n*     throw out;\n* }\n* console.log( out );\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar readDir = require( './async.js' );\nvar sync = require( './sync.js' );\n\n\n// MAIN //\n\nsetReadOnly( readDir, 'sync', sync );\n\n\n// EXPORTS //\n\nmodule.exports = readDir;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar readfile = require( 'fs' ).readFile;\n\n\n// MAIN //\n\n/**\n* Asynchronously reads the entire contents of a file.\n*\n* @param {(string|Buffer|integer)} file - file path or file descriptor\n* @param {(Object|string)} [options] - options\n* @param {(string|null)} [options.encoding] - file encoding\n* @param {string} [options.flag] - file status flag\n* @param {Function} clbk - callback to invoke after reading file contents\n*\n* @example\n* function onFile( error, data ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.log( data );\n* }\n* readFile( __filename, onFile );\n*/\nfunction readFile() {\n\tvar args;\n\tvar i;\n\targs = [];\n\tfor ( i = 0; i < arguments.length; i++ ) {\n\t\targs.push( arguments[ i ] );\n\t}\n\treadfile.apply( null, args );\n}\n\n\n// EXPORTS //\n\nmodule.exports = readFile;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar readfileSync = require( 'fs' ).readFileSync; // eslint-disable-line node/no-sync\n\n\n// MAIN //\n\n/**\n* Synchronously reads the entire contents of a file.\n*\n* @param {(string|Buffer|integer)} file - file path or file descriptor\n* @param {(Object|string)} [options] - options\n* @param {(string|null)} [options.encoding] - file encoding\n* @param {string} [options.flag] - file status flag\n* @returns {(Buffer|string|Error)} file contents or an error\n*\n* @example\n* var out = readFileSync( __filename );\n* if ( out instanceof Error ) {\n*     throw out;\n* }\n* console.log( out );\n*/\nfunction readFileSync( file, options ) {\n\tvar f;\n\ttry {\n\t\tif ( arguments.length > 1 ) {\n\t\t\tf = readfileSync( file, options );\n\t\t} else {\n\t\t\tf = readfileSync( file );\n\t\t}\n\t} catch ( err ) {\n\t\treturn err;\n\t}\n\treturn f;\n}\n\n\n// EXPORTS //\n\nmodule.exports = readFileSync;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Read the entire contents of a file.\n*\n* @module @stdlib/fs/read-file\n*\n* @example\n* var readFile = require( '@stdlib/fs/read-file' );\n*\n* function onFile( error, data ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.log( data );\n* }\n* readFile( __filename, onFile );\n*\n* @example\n* var readFileSync = require( '@stdlib/fs/read-file' ).sync;\n*\n* var out = readFileSync( __filename );\n* if ( out instanceof Error ) {\n*     throw out;\n* }\n* console.log( out );\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar sync = require( './sync.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'sync', sync );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "{\n\t\"max_retries\": 100,\n\t\"max_delay\": 1800000\n}\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar pow = require( '@stdlib/math/base/special/pow' );\n\n\n// MAIN //\n\n/**\n* Computes an exponential delay.\n*\n* @private\n* @param {NonNegativeInteger} retries - number of retries\n* @param {number} max - maximum delay\n* @returns {NonNegativeInteger} exponential delay\n*/\nfunction delay( retries, max ) {\n\tvar d = pow( 2, retries ) - 1;\n\tif ( d > max ) {\n\t\td = max;\n\t}\n\treturn d;\n}\n\n\n// EXPORTS //\n\nmodule.exports = delay;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// EXPORTS //\n\nmodule.exports = clearTimeout;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar objectKeys = require( '@stdlib/utils/keys' );\nvar cancelTimeout = require( './clear_timeout.js' );\n\n\n// MAIN //\n\n/**\n* Clears pending timeouts.\n*\n* @private\n* @param {Object} pending - hash containing pending timeout ids\n*/\nfunction clearPending( pending ) {\n\tvar keys;\n\tvar i;\n\tkeys = objectKeys( pending );\n\tfor ( i = 0; i < keys.length; i++ ) {\n\t\tcancelTimeout( pending[ keys[i] ] );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = clearPending;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\nvar isStringArray = require( '@stdlib/assert/is-string-array' ).primitives;\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar assign = require( '@stdlib/object/assign' );\nvar readFile = require( './../../read-file' );\nvar format = require( '@stdlib/string/format' );\nvar config = require( './config.json' );\nvar delay = require( './delay.js' );\nvar clearPending = require( './clear_pending.js' );\n\n\n// VARIABLES //\n\nvar debug = logger( 'read-file-list:async' );\nvar MAX_RETRIES = config.max_retries;\nvar MAX_DELAY = config.max_delay;\n\n\n// MAIN //\n\n/**\n* Asynchronously reads the entire contents of each file in a file list.\n*\n* @param {StringArray} list - list of file paths\n* @param {(Object|string)} [options] - options\n* @param {(string|null)} [options.encoding] - file encoding\n* @param {string} [options.flag] - file status flag\n* @param {Function} clbk - callback to invoke after reading file contents\n* @throws {TypeError} first argument must be an array of strings\n* @throws {TypeError} callback argument must be a function\n*\n* @example\n* var list = [ __filename ];\n*\n* readFileList( list, onFiles );\n*\n* function onFiles( error, files ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.dir( files );\n* }\n*/\nfunction readFileList( list, options, clbk ) {\n\tvar pending;\n\tvar results;\n\tvar errFLG;\n\tvar count;\n\tvar opts;\n\tvar len;\n\tvar cb;\n\tvar i;\n\n\tif ( !isStringArray( list ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an array of strings. Value: `%s`.', list ) );\n\t}\n\tif ( arguments.length < 3 ) {\n\t\topts = {};\n\t\tcb = options;\n\t} else {\n\t\topts = assign( {}, options );\n\t\tcb = clbk;\n\t}\n\tif ( !isFunction( cb ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Callback argument must be a function. Value: `%s`.', cb ) );\n\t}\n\tlen = list.length;\n\n\tresults = new Array( len );\n\tpending = {};\n\tcount = 0;\n\n\tdebug( 'Reading %d files...', len );\n\tfor ( i = 0; i < len; i++ ) {\n\t\tdebug( 'Reading file: %s (%d of %d).', list[ i ], i+1, len );\n\t\treadFile( list[ i ], opts, getCallback( i ) );\n\t}\n\n\t/**\n\t* Returns a callback to be invoked upon reading a file.\n\t*\n\t* @private\n\t* @param {NonNegativeInteger} idx - index\n\t* @returns {Callback} callback\n\t*/\n\tfunction getCallback( idx ) {\n\t\tvar retries;\n\t\tvar file;\n\t\tvar k;\n\n\t\tfile = list[ idx ];\n\t\tk = idx + 1;\n\t\tretries = 0;\n\n\t\t/**\n\t\t* Retries reading a file.\n\t\t*\n\t\t* @private\n\t\t*/\n\t\tfunction retry() {\n\t\t\tdelete pending[ idx ];\n\t\t\tdebug( 'Reading file: %s (%d of %d). Retry: %d of %d.', file, k, len, retries, MAX_RETRIES );\n\t\t\treadFile( file, opts, onRead );\n\t\t}\n\n\t\t/**\n\t\t* Callback to be invoked upon reading a file.\n\t\t*\n\t\t* @private\n\t\t* @param {(Error|null)} error - error object\n\t\t* @param {(Buffer|string)} data - file data\n\t\t* @returns {void}\n\t\t*/\n\t\tfunction onRead( error, data ) {\n\t\t\tvar d;\n\t\t\tif ( errFLG ) {\n\t\t\t\tdebug( 'An error has already been returned. Discarding data for file: %s (%d of %d).', file, k, len );\n\t\t\t\treturn; // prevents `done()` from being called more than once\n\t\t\t}\n\t\t\tif ( error ) {\n\t\t\t\tdebug( 'Encountered an error when reading %s (%d of %d). Error: %s', file, k, len, error.message );\n\t\t\t\tif (\n\t\t\t\t\terror.code === 'EMFILE' || // current process\n\t\t\t\t\terror.code === 'ENFILE'    // across entire system\n\t\t\t\t) {\n\t\t\t\t\tretries += 1;\n\t\t\t\t\tif ( retries > MAX_RETRIES ) {\n\t\t\t\t\t\tdebug( 'Maximum number of retries exceeded. Too many open files.' );\n\t\t\t\t\t\terror = new Error( 'unexpected error. Max retries exceeded. Too many open files.' );\n\t\t\t\t\t\treturn done( error );\n\t\t\t\t\t}\n\t\t\t\t\td = delay( retries, MAX_DELAY );\n\t\t\t\t\tdebug( 'Too many open files. Will retry reading file %d of %d in %s seconds.', k, len, d/1000 );\n\t\t\t\t\tpending[ idx ] = setTimeout( retry, d );\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\treturn done( error );\n\t\t\t}\n\t\t\tdebug( 'Successfully read file: %s (%d of %d).', file, k, len );\n\t\t\tresults[ idx ] = {\n\t\t\t\t'file': file,\n\t\t\t\t'data': data\n\t\t\t};\n\t\t\tcount += 1;\n\t\t\tdebug( 'Read %d of %d files.', count, len );\n\t\t\tif ( count === len ) {\n\t\t\t\treturn done();\n\t\t\t}\n\t\t}\n\n\t\treturn onRead;\n\t}\n\n\t/**\n\t* Callback invoked upon completion.\n\t*\n\t* @private\n\t* @param {Error} [error] - error object\n\t* @returns {void}\n\t*/\n\tfunction done( error ) {\n\t\tclearPending( pending );\n\t\tif ( error ) {\n\t\t\terrFLG = true;\n\t\t\treturn cb( error );\n\t\t}\n\t\tdebug( 'Successfully read all files.' );\n\t\tcb( null, results );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = readFileList;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\nvar readFile = require( './../../read-file' ).sync;\nvar isStringArray = require( '@stdlib/assert/is-string-array' ).primitives;\nvar format = require( '@stdlib/string/format' );\n\n\n// VARIABLES //\n\nvar debug = logger( 'read-file-list:sync' );\n\n\n// MAIN //\n\n/**\n* Synchronously reads the entire contents of each file in a file list.\n*\n* @param {StringArray} list - list of file paths\n* @param {(Object|string)} [options] - options\n* @param {(string|null)} [options.encoding] - file encoding\n* @param {string} [options.flag] - file status flag\n* @throws {TypeError} must provide an array of strings\n* @returns {ObjectArray} file contents\n*\n* @example\n* var list = [ __filename ];\n* var files = readFileListSync( list );\n*\n* if ( files instanceof Error ) {\n*     throw files;\n* }\n* console.dir( files );\n*/\nfunction readFileListSync( list, options ) {\n\tvar results;\n\tvar opts;\n\tvar file;\n\tvar len;\n\tvar i;\n\n\tif ( !isStringArray( list ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an array of strings. Value: `%s`.', list ) );\n\t}\n\tif ( arguments.length > 1 ) {\n\t\topts = options;\n\t} else {\n\t\topts = {};\n\t}\n\tlen = list.length;\n\tresults = new Array( len );\n\n\tdebug( 'Reading %d files...', len );\n\tfor ( i = 0; i < len; i++ ) {\n\t\tdebug( 'Reading file: %s (%d of %d).', list[ i ], i+1, len );\n\t\tfile = readFile( list[ i ], opts );\n\t\tif ( file instanceof Error ) {\n\t\t\tdebug( 'Encountered an error when reading file: %s (%d of %d). Error: %s', list[ i ], i, len, file.message );\n\t\t\treturn file;\n\t\t}\n\t\tdebug( 'Successfully read file: %s (%d of %d).', list[ i ], i, len );\n\t\tresults[ i ] = {\n\t\t\t'file': list[ i ],\n\t\t\t'data': file\n\t\t};\n\t}\n\tdebug( 'Finished reading files.' );\n\treturn results;\n}\n\n\n// EXPORTS //\n\nmodule.exports = readFileListSync;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Read the entire contents of each file in a file list.\n*\n* @module @stdlib/fs/read-file-list\n*\n* @example\n* var readFileList = require( '@stdlib/fs/read-file-list' );\n*\n* var list = [ __filename ];\n*\n* readFileList( list, onFiles );\n*\n* function onFiles( error, files ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.dir( files );\n* }\n*\n* @example\n* var readFileList = require( '@stdlib/fs/read-file-list' ).sync;\n*\n* var list = [ __filename ];\n* var files = readFileList( list );\n*\n* if ( files instanceof Error ) {\n*     throw files;\n* }\n* console.dir( files );\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar readFileList = require( './async.js' );\nvar sync = require( './sync.js' );\n\n\n// MAIN //\n\nsetReadOnly( readFileList, 'sync', sync );\n\n\n// EXPORTS //\n\nmodule.exports = readFileList;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar readFile = require( './../../read-file' );\nvar removeBOM = require( '@stdlib/string/remove-utf8-bom' );\nvar parseJSON = require( '@stdlib/utils/parse-json' );\nvar instanceOf = require( '@stdlib/assert/instance-of' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Asynchronously reads a file as JSON.\n*\n* @param {(string|Buffer|integer)} file - file path or file descriptor\n* @param {(Options|string)} [options] - options\n* @param {(string|null)} [options.encoding] - file encoding\n* @param {string} [options.flag] - file status flag\n* @param {Function} [options.reviver] - JSON reviver\n* @param {Callback} clbk - callback\n* @throws {TypeError} options argument must be either a string or an object\n* @throws {TypeError} callback argument must be a function\n*\n* @example\n* var resolve = require( 'path' ).resolve;\n*\n* readJSON( resolve( __dirname, '..', 'package.json' ), onJSON );\n*\n* function onJSON( error, data ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.dir( data );\n* }\n*/\nfunction readJSON( file, options, clbk ) {\n\tvar opts;\n\tvar done;\n\tif ( arguments.length < 3 ) {\n\t\topts = {};\n\t\tdone = options;\n\t} else {\n\t\tif ( isString( options ) ) {\n\t\t\topts = {\n\t\t\t\t'encoding': options\n\t\t\t};\n\t\t} else {\n\t\t\tif ( !isObject( options ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be either a string or an object. Value: `%s`.', options ) );\n\t\t\t}\n\t\t\topts = options;\n\t\t}\n\t\tdone = clbk;\n\t}\n\tif ( !isFunction( done ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Callback argument must be a function. Value: `%s`.', done ) );\n\t}\n\treadFile( file, opts, onRead );\n\n\t/**\n\t* Callback invoked upon reading a file.\n\t*\n\t* @private\n\t* @param {(Error|null)} error - error object\n\t* @param {(Buffer|string)} file - file contents\n\t* @returns {void}\n\t*/\n\tfunction onRead( error, file ) {\n\t\tif ( error ) {\n\t\t\treturn done( error );\n\t\t}\n\t\tfile = file.toString();\n\t\tif ( opts.encoding === 'utf8' ) {\n\t\t\tfile = removeBOM( file );\n\t\t}\n\t\tif ( opts.reviver ) {\n\t\t\tfile = parseJSON( file, opts.reviver );\n\t\t} else {\n\t\t\tfile = parseJSON( file );\n\t\t}\n\t\tif ( instanceOf( file, Error ) ) {\n\t\t\treturn done( file );\n\t\t}\n\t\tdone( null, file );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = readJSON;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar readFile = require( './../../read-file' ).sync;\nvar removeBOM = require( '@stdlib/string/remove-utf8-bom' );\nvar parseJSON = require( '@stdlib/utils/parse-json' );\nvar instanceOf = require( '@stdlib/assert/instance-of' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Synchronously reads a file as JSON.\n*\n* @param {(string|Buffer|integer)} file - file path or file descriptor\n* @param {(Options|string)} [options] - options\n* @param {(string|null)} [options.encoding] - file encoding\n* @param {string} [options.flag] - file status flag\n* @param {Function} [options.reviver] - JSON reviver\n* @throws {TypeError} options argument must be either a string or an object\n* @returns {(JSON|Error)} JSON or an error\n*\n* @example\n* var resolve = require( 'path' ).resolve;\n* var instanceOf = require( '@stdlib/assert/instance-of' );\n*\n* var out = readJSONSync( resolve( __dirname, '..', 'package.json' ) );\n* if ( instanceOf( out, Error ) ) {\n*     throw out;\n* }\n* console.dir( out );\n*/\nfunction readJSONSync( file, options ) {\n\tvar opts;\n\tvar f;\n\tif ( arguments.length > 1 ) {\n\t\tif ( isString( options ) ) {\n\t\t\topts = {\n\t\t\t\t'encoding': options\n\t\t\t};\n\t\t} else {\n\t\t\tif ( !isObject( options ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be either a string or an object. Value: `%s`.', options ) );\n\t\t\t}\n\t\t\topts = options;\n\t\t}\n\t} else {\n\t\topts = {};\n\t}\n\tf = readFile( file, opts );\n\tif ( instanceOf( f, Error ) ) {\n\t\treturn f;\n\t}\n\tf = f.toString();\n\tif ( opts.encoding === 'utf8' ) {\n\t\tf = removeBOM( f );\n\t}\n\tif ( opts.reviver ) {\n\t\treturn parseJSON( f, opts.reviver );\n\t}\n\treturn parseJSON( f );\n}\n\n\n// EXPORTS //\n\nmodule.exports = readJSONSync;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Read a file as JSON.\n*\n* @module @stdlib/fs/read-json\n*\n* @example\n* var resolve = require( 'path' ).resolve;\n* var readJSON = require( '@stdlib/fs/read-json' );\n*\n* function onJSON( error, data ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.dir( data );\n* }\n*\n* readJSON( resolve( __dirname, '..', 'package.json' ), onJSON );\n*\n* @example\n* var resolve = require( 'path' ).resolve;\n* var instanceOf = require( '@stdlib/assert/instance-of' );\n* var readJSON = require( '@stdlib/fs/read-json' );\n*\n* var out = readJSON.sync( resolve( __dirname, '..', 'package.json' ) );\n* if ( instanceOf( out, Error ) ) {\n*     throw out;\n* }\n* console.dir( out );\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar readJSON = require( './async.js' );\nvar sync = require( './sync.js' );\n\n\n// MAIN //\n\nsetReadOnly( readJSON, 'sync', sync );\n\n\n// EXPORTS //\n\nmodule.exports = readJSON;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar isUint8Array = require( '@stdlib/assert/is-uint8array' );\nvar readFile = require( './../../read-file' );\nvar Uint8Array = require( '@stdlib/array/uint8' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Reads the entire contents of a WebAssembly file.\n*\n* @param {(string|Buffer|integer)} file - file path or file descriptor\n* @param {Options} [options] - options\n* @param {string} [options.flag] - file status flag\n* @param {Callback} clbk - callback to invoke after reading a file\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} callback argument must be a function\n*\n* @example\n* var join = require( 'path' ).join;\n* var instanceOf = require( '@stdlib/assert/instance-of' );\n*\n* var fpath = join( __dirname, 'foo.wasm' );\n* readWASM( fpath, onRead );\n*\n* function onRead( error, buf ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.log( buf );\n* }\n*/\nfunction readWASM( file, options, clbk ) {\n\tvar opts;\n\tvar done;\n\tif ( arguments.length < 3 ) {\n\t\topts = {};\n\t\tdone = options;\n\t} else {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = options;\n\t\tdone = clbk;\n\t}\n\tif ( !isFunction( done ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Callback argument must be a function. Value: `%s`.', done ) );\n\t}\n\t// Always override setting the encoding option, as wasm is a binary file format:\n\topts.encoding = null;\n\treadFile( file, opts, onRead );\n\n\t/**\n\t* Callback invoked upon reading a file.\n\t*\n\t* @private\n\t* @param {(Error|null)} error - error object\n\t* @param {(Buffer|string)} file - file contents\n\t* @returns {void}\n\t*/\n\tfunction onRead( error, file ) {\n\t\tvar out;\n\t\tvar i;\n\t\tif ( error ) {\n\t\t\treturn done( error );\n\t\t}\n\t\tif ( isUint8Array( file ) ) {\n\t\t\treturn done( null, file );\n\t\t}\n\t\t// Handle older Node.js environments where Buffer objects are not Uint8Arrays...\n\t\tout = new Uint8Array( file.length );\n\t\tfor ( i = 0; i < file.length; i++ ) {\n\t\t\tout[ i ] = file[ i ];\n\t\t}\n\t\tdone( null, out );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = readWASM;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isUint8Array = require( '@stdlib/assert/is-uint8array' );\nvar instanceOf = require( '@stdlib/assert/instance-of' );\nvar readFileSync = require( './../../read-file' ).sync;\nvar Uint8Array = require( '@stdlib/array/uint8' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Synchronously reads the entire contents of a WebAssembly file.\n*\n* @param {(string|Buffer|integer)} file - file path or file descriptor\n* @param {Options} [options] - options\n* @param {string} [options.flag] - file status flag\n* @throws {TypeError} options argument must be an object\n* @returns {(Uint8Array|Error)} file contents or an error\n*\n* @example\n* var join = require( 'path' ).join;\n* var instanceOf = require( '@stdlib/assert/instance-of' );\n*\n* var fpath = join( __dirname, 'foo.wasm' );\n* var out = readWASMSync( fpath );\n* if ( instanceOf( out, Error ) ) {\n*     throw out;\n* }\n* console.log( out );\n*/\nfunction readWASMSync( file, options ) {\n\tvar opts;\n\tvar out;\n\tvar f;\n\tvar i;\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = options;\n\t} else {\n\t\topts = {};\n\t}\n\t// Always override setting the encoding option, as wasm is a binary file format:\n\topts.encoding = null;\n\tf = readFileSync( file, opts );\n\tif ( instanceOf( f, Error ) ) {\n\t\treturn f;\n\t}\n\tif ( isUint8Array( f ) ) {\n\t\treturn f;\n\t}\n\t// Handle older Node.js environments where Buffer objects are not Uint8Arrays...\n\tout = new Uint8Array( f.length );\n\tfor ( i = 0; i < f.length; i++ ) {\n\t\tout[ i ] = f[ i ];\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = readWASMSync;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Read the entire contents of a WebAssembly file.\n*\n* @module @stdlib/fs/read-wasm\n*\n* @example\n* var join = require( 'path' ).join;\n* var readWASM = require( '@stdlib/fs/read-wasm' );\n*\n* var fpath = join( __dirname, 'foo.wasm' );\n* readWASM( fpath, onRead );\n*\n* function onRead( error, buf ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.log( out );\n* }\n*\n* @example\n* var join = require( 'path' ).join;\n* var instanceOf = require( '@stdlib/assert/instance-of' );\n* var readWASMSync = require( '@stdlib/fs/read-wasm' ).sync;\n*\n* var fpath = join( __dirname, 'foo.wasm' );\n* var out = readWASMSync( fpath );\n* if ( instanceOf( out, Error ) ) {\n*     throw out;\n* }\n* console.log( out );\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar readWASM = require( './async.js' );\nvar sync = require( './sync.js' );\n\n\n// MAIN //\n\nsetReadOnly( readWASM, 'sync', sync );\n\n\n// EXPORTS //\n\nmodule.exports = readWASM;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar native = require( 'fs' ).rename;\n\n\n// MAIN //\n\n/**\n* Asynchronously renames a file.\n*\n* @param {(string|Buffer)} oldPath - old path\n* @param {(string|Buffer)} newPath - new path\n* @param {Function} clbk - callback to invoke after renaming a path\n*\n* @example\n* function done( error ) {\n*     if ( error ) {\n*         throw error;\n*     }\n* }\n*\n* rename( './beep/boop.txt', './beep/foo.txt', done );\n*/\nfunction rename( oldPath, newPath, clbk ) {\n\tnative( oldPath, newPath, clbk );\n}\n\n\n// EXPORTS //\n\nmodule.exports = rename;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar rename = require( 'fs' ).renameSync; // eslint-disable-line node/no-sync\n\n\n// MAIN //\n\n/**\n* Synchronously renames a file.\n*\n* @param {(string|Buffer)} oldPath - old path\n* @param {(string|Buffer)} newPath - new path\n* @returns {(Error|null)} error object or null\n*\n* @example\n* var err = renameSync( './beep/boop.txt', './beep/foo.txt' );\n* if ( err instanceof Error ) {\n*     throw err;\n* }\n*/\nfunction renameSync( oldPath, newPath ) {\n\ttry {\n\t\trename( oldPath, newPath );\n\t} catch ( err ) {\n\t\treturn err;\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = renameSync;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Rename a file.\n*\n* @module @stdlib/fs/rename\n*\n* @example\n* var rename = require( '@stdlib/fs/rename' );\n*\n* function done( error ) {\n*     if ( error ) {\n*         throw error;\n*     }\n* }\n*\n* rename( './beep/boop.txt', './beep/foo.txt', done );\n*\n* @example\n* var renameSync = require( '@stdlib/fs/rename' ).sync;\n*\n* var err = renameSync( './beep/boop.txt', './beep/foo.txt' );\n* if ( err instanceof Error ) {\n*     throw err;\n* }\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar sync = require( './sync.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'sync', sync );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.dir] - base directory\n* @returns {(Error|null)} error object or null\n*\n* @example\n* var opts = {};\n* var options = {\n*     'dir': '/foo/bar/baz'\n* };\n*\n* var err = validate( opts, options );\n* if ( err ) {\n*    throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'dir' ) ) {\n\t\topts.dir = options.dir;\n\t\tif ( !isString( opts.dir ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'dir', opts.dir ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar resolve = require( 'path' ).resolve;\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar cwd = require( '@stdlib/process/cwd' );\nvar exists = require( './../../exists' );\nvar format = require( '@stdlib/string/format' );\nvar validate = require( './validate.js' );\n\n\n// MAIN //\n\n/**\n* Asynchronously resolves a path by walking parent directories.\n*\n* @param {string} path - path to resolve\n* @param {Options} [options] - function options\n* @param {string} [options.dir] - base directory\n* @param {Callback} clbk - callback to invoke after resolving a path\n* @throws {TypeError} first argument must be a string\n* @throws {TypeError} callback argument must be a function\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n*\n* @example\n* resolveParentPath( 'package.json', onPath );\n*\n* function onPath( error, path ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.log( path );\n* }\n*/\nfunction resolveParentPath( path, options, clbk ) {\n\tvar spath;\n\tvar child;\n\tvar opts;\n\tvar done;\n\tvar dir;\n\tvar err;\n\tif ( !isString( path ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a string. Value: `%s`.', path ) );\n\t}\n\topts = {};\n\tif ( arguments.length > 2 ) {\n\t\tdone = clbk;\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t} else {\n\t\tdone = options;\n\t}\n\tif ( !isFunction( done ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Callback argument must be a function. Value: `%s`.', done ) );\n\t}\n\tif ( opts.dir ) {\n\t\tdir = resolve( cwd(), opts.dir );\n\t} else {\n\t\tdir = cwd();\n\t}\n\tspath = resolve( dir, path );\n\texists( spath, onExists );\n\n\t/**\n\t* Callback invoked after checking for path existence.\n\t*\n\t* @private\n\t* @param {(Error|null)} error - error object\n\t* @param {boolean} bool - boolean indicating if a path exists\n\t* @returns {void}\n\t*/\n\tfunction onExists( error, bool ) { // eslint-disable-line handle-callback-err\n\t\tif ( bool ) {\n\t\t\treturn done( null, spath );\n\t\t}\n\t\t// Resolve a parent directory:\n\t\tchild = dir;\n\t\tdir = resolve( dir, '..' );\n\n\t\t// If we have already reached root, we cannot resolve any higher directories...\n\t\tif ( child === dir ) {\n\t\t\treturn done( null, null );\n\t\t}\n\t\t// Resolve the next search path:\n\t\tspath = resolve( dir, path );\n\t\texists( spath, onExists );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = resolveParentPath;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar resolve = require( 'path' ).resolve;\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar cwd = require( '@stdlib/process/cwd' );\nvar exists = require( './../../exists' ).sync;\nvar format = require( '@stdlib/string/format' );\nvar validate = require( './validate.js' );\n\n\n// MAIN //\n\n/**\n* Synchronously resolves a path by walking parent directories.\n*\n* @param {string} path - path to resolve\n* @param {Options} [options] - function options\n* @param {string} [options.dir] - base directory\n* @throws {TypeError} first argument must be a string\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {(string|null)} resolved path or null\n*\n* @example\n* var path = resolveParentPath( 'package.json' );\n*/\nfunction resolveParentPath( path, options ) {\n\tvar spath;\n\tvar child;\n\tvar opts;\n\tvar dir;\n\tvar err;\n\tif ( !isString( path ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a string. Value: `%s`.', path ) );\n\t}\n\topts = {};\n\tif ( arguments.length > 1 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( opts.dir ) {\n\t\tdir = resolve( cwd(), opts.dir );\n\t} else {\n\t\tdir = cwd();\n\t}\n\t// Start at a base directory and continue moving up through each parent directory until able to resolve a search path or until reaching the root directory...\n\twhile ( child !== dir ) {\n\t\tspath = resolve( dir, path );\n\t\tif ( exists( spath ) ) {\n\t\t\treturn spath;\n\t\t}\n\t\tchild = dir;\n\t\tdir = resolve( dir, '..' );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = resolveParentPath;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Resolve a path by walking parent directories.\n*\n* @module @stdlib/fs/resolve-parent-path\n*\n* @example\n* var resolveParentPath = require( '@stdlib/fs/resolve-parent-path' );\n*\n* resolveParentPath( 'package.json', onPath );\n*\n* function onPath( error, path ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.log( path );\n* }\n*\n* @example\n* var resolveParentPath = require( '@stdlib/fs/resolve-parent-path' );\n*\n* var path = resolveParentPath.sync( 'package.json' );\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar resolveParentPath = require( './async.js' );\nvar sync = require( './sync.js' );\n\n\n// MAIN //\n\nsetReadOnly( resolveParentPath, 'sync', sync );\n\n\n// EXPORTS //\n\nmodule.exports = resolveParentPath;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.dir] - base directory\n* @returns {(Error|null)} error object or null\n*\n* @example\n* var opts = {};\n* var options = {\n*     'dir': '/foo/bar/baz'\n* };\n*\n* var err = validate( opts, options );\n* if ( err ) {\n*    throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'dir' ) ) {\n\t\topts.dir = options.dir;\n\t\tif ( !isString( opts.dir ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'dir', opts.dir ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar resolve = require( 'path' ).resolve;\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar format = require( '@stdlib/string/format' );\nvar cwd = require( '@stdlib/process/cwd' );\nvar exists = require( './../../exists' );\nvar validate = require( './validate.js' );\n\n\n// MAIN //\n\n/**\n* Asynchronously resolves a path according to a predicate function by walking parent directories.\n*\n* @param {string} path - path to resolve\n* @param {Options} [options] - function options\n* @param {string} [options.dir] - base directory\n* @param {Function} predicate - callback which tests whether a resolved path passes a test\n* @param {Function} clbk - callback to invoke after resolving a path\n* @throws {TypeError} first argument must be a string\n* @throws {TypeError} predicate function argument must be a function\n* @throws {TypeError} callback argument must be a function\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n*\n* @example\n* resolveParentPathBy( 'package.json', predicate, onPath );\n*\n* function predicate( path, next ) {\n*     next( null, true );\n* }\n*\n* function onPath( error, path ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.log( path );\n* }\n*/\nfunction resolveParentPathBy( path, options, predicate, clbk ) {\n\tvar spath;\n\tvar child;\n\tvar test;\n\tvar opts;\n\tvar done;\n\tvar dir;\n\tvar err;\n\tif ( !isString( path ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a string. Value: `%s`.', path ) );\n\t}\n\topts = {};\n\tif ( arguments.length > 3 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t\ttest = predicate;\n\t\tdone = clbk;\n\t} else {\n\t\ttest = options;\n\t\tdone = predicate;\n\t}\n\tif ( !isFunction( test ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Predicate function must be a function. Value: `%s`.', test ) );\n\t}\n\tif ( !isFunction( done ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Callback argument must be a function. Value: `%s`.', done ) );\n\t}\n\tif ( opts.dir ) {\n\t\tdir = resolve( cwd(), opts.dir );\n\t} else {\n\t\tdir = cwd();\n\t}\n\tspath = resolve( dir, path );\n\texists( spath, onExists );\n\n\t/**\n\t* Resolves the next candidate path.\n\t*\n\t* @private\n\t* @returns {void}\n\t*/\n\tfunction next() {\n\t\t// Resolve a parent directory:\n\t\tchild = dir;\n\t\tdir = resolve( dir, '..' );\n\n\t\t// If we have already reached root, we cannot resolve any higher directories...\n\t\tif ( child === dir ) {\n\t\t\treturn done( null, null );\n\t\t}\n\t\t// Resolve the next search path:\n\t\tspath = resolve( dir, path );\n\t\texists( spath, onExists );\n\t}\n\n\t/**\n\t* Callback invoked after checking for path existence.\n\t*\n\t* @private\n\t* @param {(Error|null)} error - error object\n\t* @param {boolean} bool - boolean indicating if a path exists\n\t* @returns {void}\n\t*/\n\tfunction onExists( error, bool ) { // eslint-disable-line handle-callback-err\n\t\tif ( bool ) {\n\t\t\treturn test( spath, onTest );\n\t\t}\n\t\tnext();\n\t}\n\n\t/**\n\t* Callback invoked after testing a resolved path.\n\t*\n\t* @private\n\t* @param {(Error|null)} error - error object\n\t* @param {boolean} bool - boolean indicating if a path exists\n\t* @returns {void}\n\t*/\n\tfunction onTest( error, bool ) {\n\t\tif ( error ) {\n\t\t\treturn done( error );\n\t\t}\n\t\tif ( bool ) {\n\t\t\treturn done( null, spath );\n\t\t}\n\t\tnext();\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = resolveParentPathBy;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar resolve = require( 'path' ).resolve;\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar cwd = require( '@stdlib/process/cwd' );\nvar exists = require( './../../exists' ).sync;\nvar format = require( '@stdlib/string/format' );\nvar validate = require( './validate.js' );\n\n\n// MAIN //\n\n/**\n* Synchronously resolves a path according to a predicate function by walking parent directories.\n*\n* @param {string} path - path to resolve\n* @param {Options} [options] - function options\n* @param {string} [options.dir] - base directory\n* @param {Function} predicate - callback which tests whether a resolved path passes a test\n* @throws {TypeError} first argument must be a string\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {TypeError} last argument must be a function\n* @returns {(string|null)} resolved path or null\n*\n* @example\n* function predicate() {\n*     return true;\n* }\n*\n* var path = resolveParentPathBy( 'package.json', predicate );\n* // e.g., returns '...'\n*/\nfunction resolveParentPathBy( path, options, predicate ) {\n\tvar spath;\n\tvar child;\n\tvar test;\n\tvar opts;\n\tvar dir;\n\tvar err;\n\tif ( !isString( path ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a string. Value: `%s`.', path ) );\n\t}\n\topts = {};\n\tif ( arguments.length > 2 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t\ttest = predicate;\n\t} else {\n\t\ttest = options;\n\t}\n\tif ( !isFunction( test ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Last argument must be a function. Value: `%s`.', test ) );\n\t}\n\tif ( opts.dir ) {\n\t\tdir = resolve( cwd(), opts.dir );\n\t} else {\n\t\tdir = cwd();\n\t}\n\t// Start at a base directory and continue moving up through each parent directory until able to resolve a search path or until reaching the root directory...\n\twhile ( child !== dir ) {\n\t\tspath = resolve( dir, path );\n\t\tif ( exists( spath ) && test( spath ) ) {\n\t\t\treturn spath;\n\t\t}\n\t\tchild = dir;\n\t\tdir = resolve( dir, '..' );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = resolveParentPathBy;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Resolve a path according to a predicate function by walking parent directories.\n*\n* @module @stdlib/fs/resolve-parent-path-by\n*\n* @example\n* var resolveParentPathBy = require( '@stdlib/fs/resolve-parent-path-by' );\n*\n* resolveParentPathBy( 'package.json', predicate, onPath );\n*\n* function predicate( path, next ) {\n*     next( null, true );\n* }\n*\n* function onPath( error, path ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.log( path );\n* }\n*\n* @example\n* var resolveParentPathBy = require( '@stdlib/fs/resolve-parent-path-by' );\n*\n* function predicate() {\n*     return true;\n* }\n*\n* var path = resolveParentPathBy.sync( 'package.json', predicate );\n* // e.g., returns '...'\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar resolveParentPathBy = require( './async.js' );\nvar sync = require( './sync.js' );\n\n\n// MAIN //\n\nsetReadOnly( resolveParentPathBy, 'sync', sync );\n\n\n// EXPORTS //\n\nmodule.exports = resolveParentPathBy;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar remove = require( 'fs' ).unlink;\n\n\n// MAIN //\n\n/**\n* Asynchronously removes a directory entry.\n*\n* @param {(string|Buffer|integer)} path - entry path\n* @param {Function} clbk - callback to invoke after removing a directory entry\n*\n* @example\n* function done( error ) {\n*     if ( error ) {\n*         throw error;\n*     }\n* }\n*\n* unlink( './beep/boop.txt', done );\n*/\nfunction unlink( path, clbk ) {\n\tremove( path, clbk );\n}\n\n\n// EXPORTS //\n\nmodule.exports = unlink;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar unlink = require( 'fs' ).unlinkSync; // eslint-disable-line node/no-sync\n\n\n// MAIN //\n\n/**\n* Synchronously removes a directory entry.\n*\n* @param {(string|Buffer|integer)} path - path\n* @returns {(Error|null)} error object or null\n*\n* @example\n* var err = unlinkSync( './beep/boop.txt' );\n* if ( err instanceof Error ) {\n*     throw err;\n* }\n*/\nfunction unlinkSync( path ) {\n\ttry {\n\t\tunlink( path );\n\t} catch ( err ) {\n\t\treturn err;\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = unlinkSync;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Remove a directory entry.\n*\n* @module @stdlib/fs/unlink\n*\n* @example\n* var unlink = require( '@stdlib/fs/unlink' );\n*\n* function done( error ) {\n*     if ( error ) {\n*         throw error;\n*     }\n* }\n*\n* unlink( './beep/boop.txt', done );\n*\n* @example\n* var unlinkSync = require( '@stdlib/fs/unlink' ).sync;\n*\n* var err = unlinkSync( './beep/boop.txt' );\n* if ( err instanceof Error ) {\n*     throw err;\n* }\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar sync = require( './sync.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'sync', sync );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar write = require( 'fs' ).writeFile;\n\n\n// MAIN //\n\n/**\n* Asynchronously writes data to a file.\n*\n* @param {(string|Buffer|integer)} file - file path or file descriptor\n* @param {(string|Buffer)} data - data to write\n* @param {(Object|string)} [options] - options\n* @param {Function} clbk - callback to invoke after writing data to a file\n*\n* @example\n* function onWrite( error ) {\n*     if ( error ) {\n*         throw error;\n*     }\n* }\n*\n* writeFile( './beep/boop.txt', 'beep boop\\n', onWrite );\n*/\nfunction writeFile() {\n\tvar args;\n\tvar i;\n\targs = [];\n\tfor ( i = 0; i < arguments.length; i++ ) {\n\t\targs.push( arguments[ i ] );\n\t}\n\twrite.apply( null, args );\n}\n\n\n// EXPORTS //\n\nmodule.exports = writeFile;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar writeFile = require( 'fs' ).writeFileSync; // eslint-disable-line node/no-sync\n\n\n// MAIN //\n\n/**\n* Synchronously writes data to a file.\n*\n* @param {(string|Buffer|integer)} file - file path or file descriptor\n* @param {(string|Buffer)} data - data to write\n* @param {(Object|string)} [options] - options\n* @returns {(Error|null)} error object or null\n*\n* @example\n* var err = writeFileSync( './beep/boop.txt', 'beep boop\\n' );\n* if ( err instanceof Error ) {\n*     throw err;\n* }\n*/\nfunction writeFileSync( file, data, options ) {\n\ttry {\n\t\tif ( arguments.length > 2 ) {\n\t\t\twriteFile( file, data, options );\n\t\t} else {\n\t\t\twriteFile( file, data );\n\t\t}\n\t} catch ( err ) {\n\t\treturn err;\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = writeFileSync;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Write data to a file.\n*\n* @module @stdlib/fs/write-file\n*\n* @example\n* var writeFile = require( '@stdlib/fs/write-file' );\n*\n* function onWrite( error ) {\n*     if ( error ) {\n*         throw error;\n*     }\n* }\n*\n* writeFile( './beep/boop.txt', 'beep boop\\n', onWrite );\n*\n* @example\n* var writeFileSync = require( '@stdlib/fs/write-file' ).sync;\n*\n* var err = writeFileSync( './beep/boop.txt', 'beep boop\\n' );\n* if ( err instanceof Error ) {\n*     throw err;\n* }\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar sync = require( './sync.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'sync', sync );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace fs\n*/\nvar fs = {};\n\n/**\n* @name close\n* @memberof fs\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/fs/close}\n*/\nsetReadOnly( fs, 'close', require( './../close' ) );\n\n/**\n* @name exists\n* @memberof fs\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/fs/exists}\n*/\nsetReadOnly( fs, 'exists', require( './../exists' ) );\n\n/**\n* @name open\n* @memberof fs\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/fs/open}\n*/\nsetReadOnly( fs, 'open', require( './../open' ) );\n\n/**\n* @name readDir\n* @memberof fs\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/fs/read-dir}\n*/\nsetReadOnly( fs, 'readDir', require( './../read-dir' ) );\n\n/**\n* @name readFile\n* @memberof fs\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/fs/read-file}\n*/\nsetReadOnly( fs, 'readFile', require( './../read-file' ) );\n\n/**\n* @name readFileList\n* @memberof fs\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/fs/read-file-list}\n*/\nsetReadOnly( fs, 'readFileList', require( './../read-file-list' ) );\n\n/**\n* @name readJSON\n* @memberof fs\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/fs/read-json}\n*/\nsetReadOnly( fs, 'readJSON', require( './../read-json' ) );\n\n/**\n* @name readWASM\n* @memberof fs\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/fs/read-wasm}\n*/\nsetReadOnly( fs, 'readWASM', require( './../read-wasm' ) );\n\n/**\n* @name rename\n* @memberof fs\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/fs/rename}\n*/\nsetReadOnly( fs, 'rename', require( './../rename' ) );\n\n/**\n* @name resolveParentPath\n* @memberof fs\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/fs/resolve-parent-path}\n*/\nsetReadOnly( fs, 'resolveParentPath', require( './../resolve-parent-path' ) );\n\n/**\n* @name resolveParentPathBy\n* @memberof fs\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/fs/resolve-parent-path-by}\n*/\nsetReadOnly( fs, 'resolveParentPathBy', require( './../resolve-parent-path-by' ) );\n\n/**\n* @name unlink\n* @memberof fs\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/fs/unlink}\n*/\nsetReadOnly( fs, 'unlink', require( './../unlink' ) );\n\n/**\n* @name writeFile\n* @memberof fs\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/fs/write-file}\n*/\nsetReadOnly( fs, 'writeFile', require( './../write-file' ) );\n\n\n// EXPORTS //\n\nmodule.exports = fs;\n"],
  "mappings": "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",
  "names": ["require_main", "__commonJSMin", "exports", "module", "native", "isNonNegativeInteger", "isFunction", "format", "close", "fd", "clbk", "require_sync", "__commonJSMin", "exports", "module", "close", "isNonNegativeInteger", "format", "closeSync", "fd", "err", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "sync", "require_async", "__commonJSMin", "exports", "module", "fs", "fcn", "exists", "path", "clbk", "done", "error", "require_sync", "__commonJSMin", "exports", "module", "fs", "fcn", "existsSync", "path", "err", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "exists", "sync", "require_defaults", "__commonJSMin", "exports", "module", "require_main", "__commonJSMin", "exports", "module", "op", "defaults", "open", "path", "flags", "mode", "clbk", "nargs", "require_sync", "__commonJSMin", "exports", "module", "open", "defaults", "openSync", "path", "flags", "mode", "nargs", "fd", "err", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "sync", "require_async", "__commonJSMin", "exports", "module", "readdir", "readDir", "args", "i", "require_sync", "__commonJSMin", "exports", "module", "readdirSync", "readDirSync", "path", "err", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "readDir", "sync", "require_main", "__commonJSMin", "exports", "module", "readfile", "readFile", "args", "i", "require_sync", "__commonJSMin", "exports", "module", "readfileSync", "readFileSync", "file", "options", "f", "err", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "sync", "require_config", "__commonJSMin", "exports", "module", "require_delay", "__commonJSMin", "exports", "module", "pow", "delay", "retries", "max", "d", "require_clear_timeout", "__commonJSMin", "exports", "module", "require_clear_pending", "__commonJSMin", "exports", "module", "objectKeys", "cancelTimeout", "clearPending", "pending", "keys", "i", "require_async", "__commonJSMin", "exports", "module", "logger", "isStringArray", "isFunction", "assign", "readFile", "format", "config", "delay", "clearPending", "debug", "MAX_RETRIES", "MAX_DELAY", "readFileList", "list", "options", "clbk", "pending", "results", "errFLG", "count", "opts", "len", "cb", "i", "getCallback", "idx", "retries", "file", "k", "retry", "onRead", "error", "data", "d", "done", "require_sync", "__commonJSMin", "exports", "module", "logger", "readFile", "isStringArray", "format", "debug", "readFileListSync", "list", "options", "results", "opts", "file", "len", "i", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "readFileList", "sync", "require_async", "__commonJSMin", "exports", "module", "isString", "isObject", "isFunction", "readFile", "removeBOM", "parseJSON", "instanceOf", "format", "readJSON", "file", "options", "clbk", "opts", "done", "onRead", "error", "require_sync", "__commonJSMin", "exports", "module", "isString", "isObject", "readFile", "removeBOM", "parseJSON", "instanceOf", "format", "readJSONSync", "file", "options", "opts", "f", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "readJSON", "sync", "require_async", "__commonJSMin", "exports", "module", "isObject", "isFunction", "isUint8Array", "readFile", "Uint8Array", "format", "readWASM", "file", "options", "clbk", "opts", "done", "onRead", "error", "out", "i", "require_sync", "__commonJSMin", "exports", "module", "isObject", "isUint8Array", "instanceOf", "readFileSync", "Uint8Array", "format", "readWASMSync", "file", "options", "opts", "out", "f", "i", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "readWASM", "sync", "require_main", "__commonJSMin", "exports", "module", "native", "rename", "oldPath", "newPath", "clbk", "require_sync", "__commonJSMin", "exports", "module", "rename", "renameSync", "oldPath", "newPath", "err", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "sync", "require_validate", "__commonJSMin", "exports", "module", "isObject", "hasOwnProp", "isString", "format", "validate", "opts", "options", "require_async", "__commonJSMin", "exports", "module", "resolve", "isString", "isFunction", "cwd", "exists", "format", "validate", "resolveParentPath", "path", "options", "clbk", "spath", "child", "opts", "done", "dir", "err", "onExists", "error", "bool", "require_sync", "__commonJSMin", "exports", "module", "resolve", "isString", "cwd", "exists", "format", "validate", "resolveParentPath", "path", "options", "spath", "child", "opts", "dir", "err", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "resolveParentPath", "sync", "require_validate", "__commonJSMin", "exports", "module", "isObject", "hasOwnProp", "isString", "format", "validate", "opts", "options", "require_async", "__commonJSMin", "exports", "module", "resolve", "isString", "isFunction", "format", "cwd", "exists", "validate", "resolveParentPathBy", "path", "options", "predicate", "clbk", "spath", "child", "test", "opts", "done", "dir", "err", "onExists", "next", "error", "bool", "onTest", "require_sync", "__commonJSMin", "exports", "module", "resolve", "isString", "isFunction", "cwd", "exists", "format", "validate", "resolveParentPathBy", "path", "options", "predicate", "spath", "child", "test", "opts", "dir", "err", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "resolveParentPathBy", "sync", "require_main", "__commonJSMin", "exports", "module", "remove", "unlink", "path", "clbk", "require_sync", "__commonJSMin", "exports", "module", "unlink", "unlinkSync", "path", "err", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "sync", "require_main", "__commonJSMin", "exports", "module", "write", "writeFile", "args", "i", "require_sync", "__commonJSMin", "exports", "module", "writeFile", "writeFileSync", "file", "data", "options", "err", "require_lib", "__commonJSMin", "exports", "module", "setReadOnly", "main", "sync", "setReadOnly", "fs"]
}
