{"version":3,"file":"index.mjs","sources":["../close/lib/main.js","../close/lib/sync.js","../close/lib/index.js","../exists/lib/async.js","../exists/lib/sync.js","../exists/lib/index.js","../open/lib/main.js","../open/lib/sync.js","../open/lib/index.js","../read-dir/lib/async.js","../read-dir/lib/sync.js","../read-dir/lib/index.js","../read-file/lib/main.js","../read-file/lib/sync.js","../read-file/lib/index.js","../read-file-list/lib/delay.js","../read-file-list/lib/clear_timeout.js","../read-file-list/lib/clear_pending.js","../read-file-list/lib/async.js","../read-file-list/lib/sync.js","../read-file-list/lib/index.js","../read-json/lib/async.js","../read-json/lib/sync.js","../read-json/lib/index.js","../read-wasm/lib/async.js","../read-wasm/lib/sync.js","../read-wasm/lib/index.js","../rename/lib/main.js","../rename/lib/sync.js","../rename/lib/index.js","../resolve-parent-path/lib/validate.js","../resolve-parent-path/lib/async.js","../resolve-parent-path/lib/sync.js","../resolve-parent-path/lib/index.js","../resolve-parent-path-by/lib/validate.js","../resolve-parent-path-by/lib/async.js","../resolve-parent-path-by/lib/sync.js","../resolve-parent-path-by/lib/index.js","../unlink/lib/main.js","../unlink/lib/sync.js","../unlink/lib/index.js","../write-file/lib/main.js","../write-file/lib/sync.js","../write-file/lib/index.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar native = require( 'fs' ).close;\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Asynchronously closes a file descriptor.\n*\n* @param {NonNegativeInteger} fd - file descriptor\n* @param {Function} clbk - callback to invoke after closing a file descriptor\n* @throws {TypeError} first argument must be a valid file descriptor (nonnegative integer)\n* @throws {TypeError} last argument must be a function\n*\n* @example\n* var openSync = require( '@stdlib/fs/open' ).sync;\n*\n* function done( error ) {\n*     if ( error ) {\n*         throw error;\n*     }\n* }\n*\n* var fd = openSync( __filename, 'r+' );\n* if ( fd instanceof Error ) {\n*     throw fd;\n* }\n*\n* close( fd, done );\n*/\nfunction close( fd, clbk ) { // eslint-disable-line stdlib/no-redeclare\n\tif ( !isNonNegativeInteger( fd ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a valid file descriptor (i.e., nonnegative integer). Value: `%s`.', fd ) );\n\t}\n\tif ( !isFunction( clbk ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Last argument must be a function. Value: `%s`.', clbk ) );\n\t}\n\tnative( fd, clbk );\n}\n\n\n// EXPORTS //\n\nmodule.exports = close;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar close = require( 'fs' ).closeSync; // eslint-disable-line node/no-sync, stdlib/no-redeclare\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Synchronously closes a file descriptor.\n*\n* @param {NonNegativeInteger} fd - file descriptor\n* @throws {TypeError} must provide a valid file descriptor (nonnegative integer)\n* @returns {(Error|void)} an error object or `undefined`\n*\n* @example\n* var openSync = require( '@stdlib/fs/open' ).sync;\n*\n* var fd = openSync( __filename, 'r+' );\n*\n* if ( fd instanceof Error ) {\n*     throw fd;\n* }\n*\n* var err = closeSync( fd );\n* if ( err instanceof Error ) {\n*     throw err;\n* }\n*/\nfunction closeSync( fd ) {\n\tif ( !isNonNegativeInteger( fd ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a valid file descriptor (i.e., a nonnegative integer). Value: `%s`.', fd ) );\n\t}\n\ttry {\n\t\tclose( fd );\n\t} catch ( err ) {\n\t\treturn err;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = closeSync;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Close a file descriptor.\n*\n* @module @stdlib/fs/close\n*\n* @example\n* var openSync = require( '@stdlib/fs/open' ).sync;\n* var close = require( '@stdlib/fs/close' );\n*\n* function done( error ) {\n*     if ( error ) {\n*         throw error;\n*     }\n* }\n*\n* var fd = openSync( __filename, 'r+' );\n* if ( fd instanceof Error ) {\n*     throw fd;\n* }\n*\n* close( fd, done );\n*\n* @example\n* var openSync = require( '@stdlib/fs/open' ).sync;\n* var closeSync = require( '@stdlib/fs/close' ).sync;\n*\n* var fd = openSync( __filename, 'r+' );\n*\n* if ( fd instanceof Error ) {\n*     throw fd;\n* }\n*\n* var err = closeSync( fd );\n* if ( err instanceof Error ) {\n*     throw err;\n* }\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar sync = require( './sync.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'sync', sync );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar fs = require( 'fs' );\n\n\n// FUNCTIONS //\n\nvar fcn;\nif ( typeof fs.access === 'function' ) {\n\tfcn = fs.access;\n} else {\n\tfcn = fs.stat;\n}\n\n\n// MAIN //\n\n/**\n* Tests whether a path exists on the filesystem.\n*\n* @param {(string|Buffer)} path - path to test\n* @param {Function} clbk - callback to invoke after testing path existence\n*\n* @example\n* exists( __dirname, done );\n*\n* function done( error, bool ) {\n*     if ( error ) {\n*         console.error( error );\n*     }\n*     if ( bool ) {\n*         console.log( '...path exists.' );\n*     } else {\n*         console.log( '...path does not exist.' );\n*     }\n* }\n*/\nfunction exists( path, clbk ) {\n\tfcn( path, done );\n\n\t/**\n\t* Callback invoked upon performing a filesystem call.\n\t*\n\t* @private\n\t* @param {(Error|null)} error - error object\n\t* @returns {void}\n\t*/\n\tfunction done( error ) {\n\t\tif ( clbk.length === 2 ) {\n\t\t\tif ( error ) {\n\t\t\t\treturn clbk( error, false );\n\t\t\t}\n\t\t\treturn clbk( null, true );\n\t\t}\n\t\tif ( error ) {\n\t\t\treturn clbk( false );\n\t\t}\n\t\treturn clbk( true );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = exists;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-sync */\n\n'use strict';\n\n// MODULES //\n\nvar fs = require( 'fs' );\n\n\n// FUNCTIONS //\n\nvar fcn;\nif ( typeof fs.accessSync === 'function' ) {\n\tfcn = fs.accessSync;\n} else {\n\tfcn = fs.statSync;\n}\n\n\n// MAIN //\n\n/**\n* Synchronously tests whether a path exists on the filesystem.\n*\n* @param {(string|Buffer)} path - path to test\n* @returns {boolean} boolean indicating whether the path exists\n*\n* @example\n* var bool = existsSync( __dirname );\n* // returns <boolean>\n*/\nfunction existsSync( path ) {\n\ttry {\n\t\tfcn( path );\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\treturn false;\n\t}\n\treturn true;\n}\n\n\n// EXPORTS //\n\nmodule.exports = existsSync;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test whether a path exists on the filesystem. For more information, see the [archive][1].\n*\n* [1]: https://github.com/nodejs/node-v0.x-archive/blob/d8baf8a2a4481940bfed0196308ae6189ca18eee/lib/fs.js#L222\n*\n* @module @stdlib/fs/exists\n*\n* @example\n* var exists = require( '@stdlib/fs/exists' );\n*\n* exists( __dirname, done );\n* exists( 'beepboop', done );\n*\n* function done( error, bool ) {\n*     if ( error ) {\n*         console.error( error.message );\n*     } else {\n*         console.log( bool );\n*     }\n* }\n*\n* @example\n* var existsSync = require( '@stdlib/fs/exists' ).sync;\n*\n* console.log( existsSync( __dirname ) );\n* // => true\n*\n* console.log( existsSync( 'beepboop' ) );\n* // => false\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar exists = require( './async.js' );\nvar sync = require( './sync.js' );\n\n\n// MAIN //\n\nsetReadOnly( exists, 'sync', sync );\n\n\n// EXPORTS //\n\nmodule.exports = exists;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar op = require( 'fs' ).open;\nvar defaults = require( './defaults.json' );\n\n\n// MAIN //\n\n/**\n* Asynchronously opens a file.\n*\n* @param {(string|Buffer)} path - file path\n* @param {(string|number)} [flags='r'] - file system flags\n* @param {integer} [mode=0o666] - file mode\n* @param {Function} clbk - callback to invoke after opening a file\n* @returns {void}\n*\n* @example\n* var closeSync = require( '@stdlib/fs/close' ).sync;\n* var open = require( '@stdlib/fs/open' );\n*\n* function onOpen( error, fd ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     closeSync( fd );\n* }\n* open( __filename, onOpen );\n*/\nfunction open( path, flags, mode, clbk ) { // eslint-disable-line stdlib/no-redeclare\n\tvar nargs = arguments.length;\n\tif ( nargs === 2 ) {\n\t\treturn op( path, defaults.flags, defaults.mode, flags );\n\t}\n\tif ( nargs === 3 ) {\n\t\treturn op( path, flags, defaults.mode, mode );\n\t}\n\top( path, flags, mode, clbk );\n}\n\n\n// EXPORTS //\n\nmodule.exports = open;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar open = require( 'fs' ).openSync; // eslint-disable-line node/no-sync, stdlib/no-redeclare\nvar defaults = require( './defaults.json' );\n\n\n// MAIN //\n\n/**\n* Synchronously opens a file.\n*\n* @param {(string|Buffer)} path - file path\n* @param {(string|number)} [flags='r'] - file system flags\n* @param {integer} [mode=0o666] - file mode\n* @returns {(integer|Error)} file descriptor or an error\n*\n* @example\n* var closeSync = require( '@stdlib/fs/close' ).sync;\n*\n* var fd = openSync( __filename );\n* if ( fd instanceof Error ) {\n*     throw fd;\n* }\n* closeSync( fd );\n*/\nfunction openSync( path, flags, mode ) {\n\tvar nargs;\n\tvar fd;\n\n\tnargs = arguments.length;\n\ttry {\n\t\tif ( nargs === 1 ) {\n\t\t\tfd = open( path, defaults.flags, defaults.mode );\n\t\t} else if ( nargs === 2 ) {\n\t\t\tfd = open( path, flags, defaults.mode );\n\t\t} else {\n\t\t\tfd = open( path, flags, mode );\n\t\t}\n\t} catch ( err ) {\n\t\treturn err;\n\t}\n\treturn fd;\n}\n\n\n// EXPORTS //\n\nmodule.exports = openSync;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Open a file.\n*\n* @module @stdlib/fs/open\n*\n* @example\n* var closeSync = require( '@stdlib/fs/close' ).sync;\n* var open = require( '@stdlib/fs/open' );\n*\n* function onOpen( error, fd ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     closeSync( fd );\n* }\n* open( __filename, onOpen );\n*\n* @example\n* var closeSync = require( '@stdlib/fs/close' ).sync;\n* var openSync = require( '@stdlib/fs/open' ).sync;\n*\n* var fd = openSync( __filename );\n* if ( fd instanceof Error ) {\n*     throw fd;\n* }\n* closeSync( fd );\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar sync = require( './sync.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'sync', sync );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar readdir = require( 'fs' ).readdir;\n\n\n// MAIN //\n\n/**\n* Asynchronously reads the contents of a directory.\n*\n* @param {(string|Buffer)} path - directory path\n* @param {Function} clbk - callback to invoke after reading directory contents\n*\n* @example\n* function onRead( error, data ) {\n*     if ( error ) {\n*         console.error( error );\n*     } else {\n*         console.log( data );\n*     }\n* }\n* readDir( __dirname, onRead );\n*/\nfunction readDir() {\n\tvar args;\n\tvar i;\n\targs = [];\n\tfor ( i = 0; i < arguments.length; i++ ) {\n\t\targs.push( arguments[ i ] );\n\t}\n\treaddir.apply( null, args );\n}\n\n\n// EXPORTS //\n\nmodule.exports = readDir;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar readdirSync = require( 'fs' ).readdirSync; // eslint-disable-line node/no-sync\n\n\n// MAIN //\n\n/**\n* Synchronously reads the contents of a directory.\n*\n* @param {(string|Buffer)} path - directory path\n* @returns {(StringArray|Error)} directory contents or an error\n*\n* @example\n* var out = readDirSync( __dirname );\n* if ( out instanceof Error ) {\n*     throw out;\n* }\n* console.log( out );\n*/\nfunction readDirSync( path ) {\n\ttry {\n\t\treturn readdirSync( path );\n\t} catch ( err ) {\n\t\treturn err;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = readDirSync;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Read the contents of a directory.\n*\n* @module @stdlib/fs/read-dir\n*\n* @example\n* var readDir = require( '@stdlib/fs/read-dir' );\n*\n* function onRead( error, data ) {\n*     if ( error ) {\n*         console.error( error );\n*     } else {\n*         console.log( data );\n*     }\n* }\n* readDir( __dirname, onRead );\n*\n* @example\n* var readDirSync = require( '@stdlib/fs/read-dir' ).sync;\n*\n* var out = readDirSync( __dirname );\n* if ( out instanceof Error ) {\n*     throw out;\n* }\n* console.log( out );\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar readDir = require( './async.js' );\nvar sync = require( './sync.js' );\n\n\n// MAIN //\n\nsetReadOnly( readDir, 'sync', sync );\n\n\n// EXPORTS //\n\nmodule.exports = readDir;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar readfile = require( 'fs' ).readFile;\n\n\n// MAIN //\n\n/**\n* Asynchronously reads the entire contents of a file.\n*\n* @param {(string|Buffer|integer)} file - file path or file descriptor\n* @param {(Object|string)} [options] - options\n* @param {(string|null)} [options.encoding] - file encoding\n* @param {string} [options.flag] - file status flag\n* @param {Function} clbk - callback to invoke after reading file contents\n*\n* @example\n* function onFile( error, data ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.log( data );\n* }\n* readFile( __filename, onFile );\n*/\nfunction readFile() {\n\tvar args;\n\tvar i;\n\targs = [];\n\tfor ( i = 0; i < arguments.length; i++ ) {\n\t\targs.push( arguments[ i ] );\n\t}\n\treadfile.apply( null, args );\n}\n\n\n// EXPORTS //\n\nmodule.exports = readFile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar readfileSync = require( 'fs' ).readFileSync; // eslint-disable-line node/no-sync\n\n\n// MAIN //\n\n/**\n* Synchronously reads the entire contents of a file.\n*\n* @param {(string|Buffer|integer)} file - file path or file descriptor\n* @param {(Object|string)} [options] - options\n* @param {(string|null)} [options.encoding] - file encoding\n* @param {string} [options.flag] - file status flag\n* @returns {(Buffer|string|Error)} file contents or an error\n*\n* @example\n* var out = readFileSync( __filename );\n* if ( out instanceof Error ) {\n*     throw out;\n* }\n* console.log( out );\n*/\nfunction readFileSync( file, options ) {\n\tvar f;\n\ttry {\n\t\tif ( arguments.length > 1 ) {\n\t\t\tf = readfileSync( file, options );\n\t\t} else {\n\t\t\tf = readfileSync( file );\n\t\t}\n\t} catch ( err ) {\n\t\treturn err;\n\t}\n\treturn f;\n}\n\n\n// EXPORTS //\n\nmodule.exports = readFileSync;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Read the entire contents of a file.\n*\n* @module @stdlib/fs/read-file\n*\n* @example\n* var readFile = require( '@stdlib/fs/read-file' );\n*\n* function onFile( error, data ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.log( data );\n* }\n* readFile( __filename, onFile );\n*\n* @example\n* var readFileSync = require( '@stdlib/fs/read-file' ).sync;\n*\n* var out = readFileSync( __filename );\n* if ( out instanceof Error ) {\n*     throw out;\n* }\n* console.log( out );\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar sync = require( './sync.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'sync', sync );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar pow = require( '@stdlib/math/base/special/pow' );\n\n\n// MAIN //\n\n/**\n* Computes an exponential delay.\n*\n* @private\n* @param {NonNegativeInteger} retries - number of retries\n* @param {number} max - maximum delay\n* @returns {NonNegativeInteger} exponential delay\n*/\nfunction delay( retries, max ) {\n\tvar d = pow( 2, retries ) - 1;\n\tif ( d > max ) {\n\t\td = max;\n\t}\n\treturn d;\n}\n\n\n// EXPORTS //\n\nmodule.exports = delay;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// EXPORTS //\n\nmodule.exports = clearTimeout;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar objectKeys = require( '@stdlib/utils/keys' );\nvar cancelTimeout = require( './clear_timeout.js' );\n\n\n// MAIN //\n\n/**\n* Clears pending timeouts.\n*\n* @private\n* @param {Object} pending - hash containing pending timeout ids\n*/\nfunction clearPending( pending ) {\n\tvar keys;\n\tvar i;\n\tkeys = objectKeys( pending );\n\tfor ( i = 0; i < keys.length; i++ ) {\n\t\tcancelTimeout( pending[ keys[i] ] );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = clearPending;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\nvar isStringArray = require( '@stdlib/assert/is-string-array' ).primitives;\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar copy = require( '@stdlib/utils/copy' );\nvar readFile = require( './../../read-file' );\nvar format = require( '@stdlib/string/format' );\nvar config = require( './config.json' );\nvar delay = require( './delay.js' );\nvar clearPending = require( './clear_pending.js' );\n\n\n// VARIABLES //\n\nvar debug = logger( 'read-file-list:async' );\nvar MAX_RETRIES = config.max_retries;\nvar MAX_DELAY = config.max_delay;\n\n\n// MAIN //\n\n/**\n* Asynchronously reads the entire contents of each file in a file list.\n*\n* @param {StringArray} list - list of file paths\n* @param {(Object|string)} [options] - options\n* @param {(string|null)} [options.encoding] - file encoding\n* @param {string} [options.flag] - file status flag\n* @param {Function} clbk - callback to invoke after reading file contents\n* @throws {TypeError} first argument must be an array of strings\n* @throws {TypeError} callback argument must be a function\n*\n* @example\n* var list = [ __filename ];\n*\n* readFileList( list, onFiles );\n*\n* function onFiles( error, files ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.dir( files );\n* }\n*/\nfunction readFileList( list, options, clbk ) {\n\tvar pending;\n\tvar results;\n\tvar errFLG;\n\tvar count;\n\tvar opts;\n\tvar len;\n\tvar cb;\n\tvar i;\n\n\tif ( !isStringArray( list ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an array of strings. Value: `%s`.', list ) );\n\t}\n\tif ( arguments.length < 3 ) {\n\t\topts = {};\n\t\tcb = options;\n\t} else {\n\t\topts = copy( options );\n\t\tcb = clbk;\n\t}\n\tif ( !isFunction( cb ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Callback argument must be a function. Value: `%s`.', cb ) );\n\t}\n\tlen = list.length;\n\n\tresults = new Array( len );\n\tpending = {};\n\tcount = 0;\n\n\tdebug( 'Reading %d files...', len );\n\tfor ( i = 0; i < len; i++ ) {\n\t\tdebug( 'Reading file: %s (%d of %d).', list[ i ], i+1, len );\n\t\treadFile( list[ i ], opts, getCallback( i ) );\n\t}\n\n\t/**\n\t* Returns a callback to be invoked upon reading a file.\n\t*\n\t* @private\n\t* @param {NonNegativeInteger} idx - index\n\t* @returns {Callback} callback\n\t*/\n\tfunction getCallback( idx ) {\n\t\tvar retries;\n\t\tvar file;\n\t\tvar k;\n\n\t\tfile = list[ idx ];\n\t\tk = idx + 1;\n\t\tretries = 0;\n\n\t\t/**\n\t\t* Retries reading a file.\n\t\t*\n\t\t* @private\n\t\t*/\n\t\tfunction retry() {\n\t\t\tdelete pending[ idx ];\n\t\t\tdebug( 'Reading file: %s (%d of %d). Retry: %d of %d.', file, k, len, retries, MAX_RETRIES );\n\t\t\treadFile( file, opts, onRead );\n\t\t}\n\n\t\t/**\n\t\t* Callback to be invoked upon reading a file.\n\t\t*\n\t\t* @private\n\t\t* @param {(Error|null)} error - error object\n\t\t* @param {(Buffer|string)} data - file data\n\t\t* @returns {void}\n\t\t*/\n\t\tfunction onRead( error, data ) {\n\t\t\tvar d;\n\t\t\tif ( errFLG ) {\n\t\t\t\tdebug( 'An error has already been returned. Discarding data for file: %s (%d of %d).', file, k, len );\n\t\t\t\treturn; // prevents `done()` from being called more than once\n\t\t\t}\n\t\t\tif ( error ) {\n\t\t\t\tdebug( 'Encountered an error when reading %s (%d of %d). Error: %s', file, k, len, error.message );\n\t\t\t\tif (\n\t\t\t\t\terror.code === 'EMFILE' || // current process\n\t\t\t\t\terror.code === 'ENFILE'    // across entire system\n\t\t\t\t) {\n\t\t\t\t\tretries += 1;\n\t\t\t\t\tif ( retries > MAX_RETRIES ) {\n\t\t\t\t\t\tdebug( 'Maximum number of retries exceeded. Too many open files.' );\n\t\t\t\t\t\terror = new Error( 'unexpected error. Max retries exceeded. Too many open files.' );\n\t\t\t\t\t\treturn done( error );\n\t\t\t\t\t}\n\t\t\t\t\td = delay( retries, MAX_DELAY );\n\t\t\t\t\tdebug( 'Too many open files. Will retry reading file %d of %d in %s seconds.', k, len, d/1000 );\n\t\t\t\t\tpending[ idx ] = setTimeout( retry, d );\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\treturn done( error );\n\t\t\t}\n\t\t\tdebug( 'Successfully read file: %s (%d of %d).', file, k, len );\n\t\t\tresults[ idx ] = {\n\t\t\t\t'file': file,\n\t\t\t\t'data': data\n\t\t\t};\n\t\t\tcount += 1;\n\t\t\tdebug( 'Read %d of %d files.', count, len );\n\t\t\tif ( count === len ) {\n\t\t\t\treturn done();\n\t\t\t}\n\t\t}\n\n\t\treturn onRead;\n\t}\n\n\t/**\n\t* Callback invoked upon completion.\n\t*\n\t* @private\n\t* @param {Error} [error] - error object\n\t* @returns {void}\n\t*/\n\tfunction done( error ) {\n\t\tclearPending( pending );\n\t\tif ( error ) {\n\t\t\terrFLG = true;\n\t\t\treturn cb( error );\n\t\t}\n\t\tdebug( 'Successfully read all files.' );\n\t\tcb( null, results );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = readFileList;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\nvar readFile = require( './../../read-file' ).sync;\nvar isStringArray = require( '@stdlib/assert/is-string-array' ).primitives;\nvar format = require( '@stdlib/string/format' );\n\n\n// VARIABLES //\n\nvar debug = logger( 'read-file-list:sync' );\n\n\n// MAIN //\n\n/**\n* Synchronously reads the entire contents of each file in a file list.\n*\n* @param {StringArray} list - list of file paths\n* @param {(Object|string)} [options] - options\n* @param {(string|null)} [options.encoding] - file encoding\n* @param {string} [options.flag] - file status flag\n* @throws {TypeError} must provide an array of strings\n* @returns {ObjectArray} file contents\n*\n* @example\n* var list = [ __filename ];\n* var files = readFileListSync( list );\n*\n* if ( files instanceof Error ) {\n*     throw files;\n* }\n* console.dir( files );\n*/\nfunction readFileListSync( list, options ) {\n\tvar results;\n\tvar opts;\n\tvar file;\n\tvar len;\n\tvar i;\n\n\tif ( !isStringArray( list ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an array of strings. Value: `%s`.', list ) );\n\t}\n\tif ( arguments.length > 1 ) {\n\t\topts = options;\n\t} else {\n\t\topts = {};\n\t}\n\tlen = list.length;\n\tresults = new Array( len );\n\n\tdebug( 'Reading %d files...', len );\n\tfor ( i = 0; i < len; i++ ) {\n\t\tdebug( 'Reading file: %s (%d of %d).', list[ i ], i+1, len );\n\t\tfile = readFile( list[ i ], opts );\n\t\tif ( file instanceof Error ) {\n\t\t\tdebug( 'Encountered an error when reading file: %s (%d of %d). Error: %s', list[ i ], i, len, file.message );\n\t\t\treturn file;\n\t\t}\n\t\tdebug( 'Successfully read file: %s (%d of %d).', list[ i ], i, len );\n\t\tresults[ i ] = {\n\t\t\t'file': list[ i ],\n\t\t\t'data': file\n\t\t};\n\t}\n\tdebug( 'Finished reading files.' );\n\treturn results;\n}\n\n\n// EXPORTS //\n\nmodule.exports = readFileListSync;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Read the entire contents of each file in a file list.\n*\n* @module @stdlib/fs/read-file-list\n*\n* @example\n* var readFileList = require( '@stdlib/fs/read-file-list' );\n*\n* var list = [ __filename ];\n*\n* readFileList( list, onFiles );\n*\n* function onFiles( error, files ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.dir( files );\n* }\n*\n* @example\n* var readFileList = require( '@stdlib/fs/read-file-list' ).sync;\n*\n* var list = [ __filename ];\n* var files = readFileList( list );\n*\n* if ( files instanceof Error ) {\n*     throw files;\n* }\n* console.dir( files );\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar readFileList = require( './async.js' );\nvar sync = require( './sync.js' );\n\n\n// MAIN //\n\nsetReadOnly( readFileList, 'sync', sync );\n\n\n// EXPORTS //\n\nmodule.exports = readFileList;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar readFile = require( './../../read-file' );\nvar removeBOM = require( '@stdlib/string/remove-utf8-bom' );\nvar parseJSON = require( '@stdlib/utils/parse-json' );\nvar instanceOf = require( '@stdlib/assert/instance-of' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Asynchronously reads a file as JSON.\n*\n* @param {(string|Buffer|integer)} file - file path or file descriptor\n* @param {(Options|string)} [options] - options\n* @param {(string|null)} [options.encoding] - file encoding\n* @param {string} [options.flag] - file status flag\n* @param {Function} [options.reviver] - JSON reviver\n* @param {Callback} clbk - callback\n* @throws {TypeError} options argument must be either a string or an object\n* @throws {TypeError} callback argument must be a function\n*\n* @example\n* var resolve = require( 'path' ).resolve;\n*\n* readJSON( resolve( __dirname, '..', 'package.json' ), onJSON );\n*\n* function onJSON( error, data ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.dir( data );\n* }\n*/\nfunction readJSON( file, options, clbk ) {\n\tvar opts;\n\tvar done;\n\tif ( arguments.length < 3 ) {\n\t\topts = {};\n\t\tdone = options;\n\t} else {\n\t\tif ( isString( options ) ) {\n\t\t\topts = {\n\t\t\t\t'encoding': options\n\t\t\t};\n\t\t} else {\n\t\t\tif ( !isObject( options ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be either a string or an object. Value: `%s`.', options ) );\n\t\t\t}\n\t\t\topts = options;\n\t\t}\n\t\tdone = clbk;\n\t}\n\tif ( !isFunction( done ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Callback argument must be a function. Value: `%s`.', done ) );\n\t}\n\treadFile( file, opts, onRead );\n\n\t/**\n\t* Callback invoked upon reading a file.\n\t*\n\t* @private\n\t* @param {(Error|null)} error - error object\n\t* @param {(Buffer|string)} file - file contents\n\t* @returns {void}\n\t*/\n\tfunction onRead( error, file ) {\n\t\tif ( error ) {\n\t\t\treturn done( error );\n\t\t}\n\t\tfile = file.toString();\n\t\tif ( opts.encoding === 'utf8' ) {\n\t\t\tfile = removeBOM( file );\n\t\t}\n\t\tif ( opts.reviver ) {\n\t\t\tfile = parseJSON( file, opts.reviver );\n\t\t} else {\n\t\t\tfile = parseJSON( file );\n\t\t}\n\t\tif ( instanceOf( file, Error ) ) {\n\t\t\treturn done( file );\n\t\t}\n\t\tdone( null, file );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = readJSON;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar readFile = require( './../../read-file' ).sync;\nvar removeBOM = require( '@stdlib/string/remove-utf8-bom' );\nvar parseJSON = require( '@stdlib/utils/parse-json' );\nvar instanceOf = require( '@stdlib/assert/instance-of' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Synchronously reads a file as JSON.\n*\n* @param {(string|Buffer|integer)} file - file path or file descriptor\n* @param {(Options|string)} [options] - options\n* @param {(string|null)} [options.encoding] - file encoding\n* @param {string} [options.flag] - file status flag\n* @param {Function} [options.reviver] - JSON reviver\n* @throws {TypeError} options argument must be either a string or an object\n* @returns {(JSON|Error)} JSON or an error\n*\n* @example\n* var resolve = require( 'path' ).resolve;\n* var instanceOf = require( '@stdlib/assert/instance-of' );\n*\n* var out = readJSONSync( resolve( __dirname, '..', 'package.json' ) );\n* if ( instanceOf( out, Error ) ) {\n*     throw out;\n* }\n* console.dir( out );\n*/\nfunction readJSONSync( file, options ) {\n\tvar opts;\n\tvar f;\n\tif ( arguments.length > 1 ) {\n\t\tif ( isString( options ) ) {\n\t\t\topts = {\n\t\t\t\t'encoding': options\n\t\t\t};\n\t\t} else {\n\t\t\tif ( !isObject( options ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be either a string or an object. Value: `%s`.', options ) );\n\t\t\t}\n\t\t\topts = options;\n\t\t}\n\t} else {\n\t\topts = {};\n\t}\n\tf = readFile( file, opts );\n\tif ( instanceOf( f, Error ) ) {\n\t\treturn f;\n\t}\n\tf = f.toString();\n\tif ( opts.encoding === 'utf8' ) {\n\t\tf = removeBOM( f );\n\t}\n\tif ( opts.reviver ) {\n\t\treturn parseJSON( f, opts.reviver );\n\t}\n\treturn parseJSON( f );\n}\n\n\n// EXPORTS //\n\nmodule.exports = readJSONSync;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Read a file as JSON.\n*\n* @module @stdlib/fs/read-json\n*\n* @example\n* var resolve = require( 'path' ).resolve;\n* var readJSON = require( '@stdlib/fs/read-json' );\n*\n* function onJSON( error, data ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.dir( data );\n* }\n*\n* readJSON( resolve( __dirname, '..', 'package.json' ), onJSON );\n*\n* @example\n* var resolve = require( 'path' ).resolve;\n* var instanceOf = require( '@stdlib/assert/instance-of' );\n* var readJSON = require( '@stdlib/fs/read-json' );\n*\n* var out = readJSON.sync( resolve( __dirname, '..', 'package.json' ) );\n* if ( instanceOf( out, Error ) ) {\n*     throw out;\n* }\n* console.dir( out );\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar readJSON = require( './async.js' );\nvar sync = require( './sync.js' );\n\n\n// MAIN //\n\nsetReadOnly( readJSON, 'sync', sync );\n\n\n// EXPORTS //\n\nmodule.exports = readJSON;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar isUint8Array = require( '@stdlib/assert/is-uint8array' );\nvar readFile = require( './../../read-file' );\nvar Uint8Array = require( '@stdlib/array/uint8' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Reads the entire contents of a WebAssembly file.\n*\n* @param {(string|Buffer|integer)} file - file path or file descriptor\n* @param {Options} [options] - options\n* @param {string} [options.flag] - file status flag\n* @param {Callback} clbk - callback to invoke after reading a file\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} callback argument must be a function\n*\n* @example\n* var join = require( 'path' ).join;\n* var instanceOf = require( '@stdlib/assert/instance-of' );\n*\n* var fpath = join( __dirname, 'foo.wasm' );\n* readWASM( fpath, onRead );\n*\n* function onRead( error, buf ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.log( buf );\n* }\n*/\nfunction readWASM( file, options, clbk ) {\n\tvar opts;\n\tvar done;\n\tif ( arguments.length < 3 ) {\n\t\topts = {};\n\t\tdone = options;\n\t} else {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = options;\n\t\tdone = clbk;\n\t}\n\tif ( !isFunction( done ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Callback argument must be a function. Value: `%s`.', done ) );\n\t}\n\t// Always override setting the encoding option, as wasm is a binary file format:\n\topts.encoding = null;\n\treadFile( file, opts, onRead );\n\n\t/**\n\t* Callback invoked upon reading a file.\n\t*\n\t* @private\n\t* @param {(Error|null)} error - error object\n\t* @param {(Buffer|string)} file - file contents\n\t* @returns {void}\n\t*/\n\tfunction onRead( error, file ) {\n\t\tvar out;\n\t\tvar i;\n\t\tif ( error ) {\n\t\t\treturn done( error );\n\t\t}\n\t\tif ( isUint8Array( file ) ) {\n\t\t\treturn done( null, file );\n\t\t}\n\t\t// Handle older Node.js environments where Buffer objects are not Uint8Arrays...\n\t\tout = new Uint8Array( file.length );\n\t\tfor ( i = 0; i < file.length; i++ ) {\n\t\t\tout[ i ] = file[ i ];\n\t\t}\n\t\tdone( null, out );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = readWASM;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isUint8Array = require( '@stdlib/assert/is-uint8array' );\nvar instanceOf = require( '@stdlib/assert/instance-of' );\nvar readFileSync = require( './../../read-file' ).sync;\nvar Uint8Array = require( '@stdlib/array/uint8' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Synchronously reads the entire contents of a WebAssembly file.\n*\n* @param {(string|Buffer|integer)} file - file path or file descriptor\n* @param {Options} [options] - options\n* @param {string} [options.flag] - file status flag\n* @throws {TypeError} options argument must be an object\n* @returns {(Uint8Array|Error)} file contents or an error\n*\n* @example\n* var join = require( 'path' ).join;\n* var instanceOf = require( '@stdlib/assert/instance-of' );\n*\n* var fpath = join( __dirname, 'foo.wasm' );\n* var out = readWASMSync( fpath );\n* if ( instanceOf( out, Error ) ) {\n*     throw out;\n* }\n* console.log( out );\n*/\nfunction readWASMSync( file, options ) {\n\tvar opts;\n\tvar out;\n\tvar f;\n\tvar i;\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = options;\n\t} else {\n\t\topts = {};\n\t}\n\t// Always override setting the encoding option, as wasm is a binary file format:\n\topts.encoding = null;\n\tf = readFileSync( file, opts );\n\tif ( instanceOf( f, Error ) ) {\n\t\treturn f;\n\t}\n\tif ( isUint8Array( f ) ) {\n\t\treturn f;\n\t}\n\t// Handle older Node.js environments where Buffer objects are not Uint8Arrays...\n\tout = new Uint8Array( f.length );\n\tfor ( i = 0; i < f.length; i++ ) {\n\t\tout[ i ] = f[ i ];\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = readWASMSync;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Read the entire contents of a WebAssembly file.\n*\n* @module @stdlib/fs/read-wasm\n*\n* @example\n* var join = require( 'path' ).join;\n* var readWASM = require( '@stdlib/fs/read-wasm' );\n*\n* var fpath = join( __dirname, 'foo.wasm' );\n* readWASM( fpath, onRead );\n*\n* function onRead( error, buf ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.log( out );\n* }\n*\n* @example\n* var join = require( 'path' ).join;\n* var instanceOf = require( '@stdlib/assert/instance-of' );\n* var readWASMSync = require( '@stdlib/fs/read-wasm' ).sync;\n*\n* var fpath = join( __dirname, 'foo.wasm' );\n* var out = readWASMSync( fpath );\n* if ( instanceOf( out, Error ) ) {\n*     throw out;\n* }\n* console.log( out );\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar readWASM = require( './async.js' );\nvar sync = require( './sync.js' );\n\n\n// MAIN //\n\nsetReadOnly( readWASM, 'sync', sync );\n\n\n// EXPORTS //\n\nmodule.exports = readWASM;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar native = require( 'fs' ).rename;\n\n\n// MAIN //\n\n/**\n* Asynchronously renames a file.\n*\n* @param {(string|Buffer)} oldPath - old path\n* @param {(string|Buffer)} newPath - new path\n* @param {Function} clbk - callback to invoke after renaming a path\n*\n* @example\n* function done( error ) {\n*     if ( error ) {\n*         throw error;\n*     }\n* }\n*\n* rename( './beep/boop.txt', './beep/foo.txt', done );\n*/\nfunction rename( oldPath, newPath, clbk ) {\n\tnative( oldPath, newPath, clbk );\n}\n\n\n// EXPORTS //\n\nmodule.exports = rename;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar rename = require( 'fs' ).renameSync; // eslint-disable-line node/no-sync\n\n\n// MAIN //\n\n/**\n* Synchronously renames a file.\n*\n* @param {(string|Buffer)} oldPath - old path\n* @param {(string|Buffer)} newPath - new path\n* @returns {(Error|null)} error object or null\n*\n* @example\n* var err = renameSync( './beep/boop.txt', './beep/foo.txt' );\n* if ( err instanceof Error ) {\n*     throw err;\n* }\n*/\nfunction renameSync( oldPath, newPath ) {\n\ttry {\n\t\trename( oldPath, newPath );\n\t} catch ( err ) {\n\t\treturn err;\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = renameSync;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Rename a file.\n*\n* @module @stdlib/fs/rename\n*\n* @example\n* var rename = require( '@stdlib/fs/rename' );\n*\n* function done( error ) {\n*     if ( error ) {\n*         throw error;\n*     }\n* }\n*\n* rename( './beep/boop.txt', './beep/foo.txt', done );\n*\n* @example\n* var renameSync = require( '@stdlib/fs/rename' ).sync;\n*\n* var err = renameSync( './beep/boop.txt', './beep/foo.txt' );\n* if ( err instanceof Error ) {\n*     throw err;\n* }\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar sync = require( './sync.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'sync', sync );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.dir] - base directory\n* @returns {(Error|null)} error object or null\n*\n* @example\n* var opts = {};\n* var options = {\n*     'dir': '/foo/bar/baz'\n* };\n*\n* var err = validate( opts, options );\n* if ( err ) {\n*    throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'dir' ) ) {\n\t\topts.dir = options.dir;\n\t\tif ( !isString( opts.dir ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'dir', opts.dir ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar resolve = require( 'path' ).resolve;\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar cwd = require( '@stdlib/process/cwd' );\nvar exists = require( './../../exists' );\nvar format = require( '@stdlib/string/format' );\nvar validate = require( './validate.js' );\n\n\n// MAIN //\n\n/**\n* Asynchronously resolves a path by walking parent directories.\n*\n* @param {string} path - path to resolve\n* @param {Options} [options] - function options\n* @param {string} [options.dir] - base directory\n* @param {Callback} clbk - callback to invoke after resolving a path\n* @throws {TypeError} first argument must be a string\n* @throws {TypeError} callback argument must be a function\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n*\n* @example\n* resolveParentPath( 'package.json', onPath );\n*\n* function onPath( error, path ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.log( path );\n* }\n*/\nfunction resolveParentPath( path, options, clbk ) {\n\tvar spath;\n\tvar child;\n\tvar opts;\n\tvar done;\n\tvar dir;\n\tvar err;\n\tif ( !isString( path ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a string. Value: `%s`.', path ) );\n\t}\n\topts = {};\n\tif ( arguments.length > 2 ) {\n\t\tdone = clbk;\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t} else {\n\t\tdone = options;\n\t}\n\tif ( !isFunction( done ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Callback argument must be a function. Value: `%s`.', done ) );\n\t}\n\tif ( opts.dir ) {\n\t\tdir = resolve( cwd(), opts.dir );\n\t} else {\n\t\tdir = cwd();\n\t}\n\tspath = resolve( dir, path );\n\texists( spath, onExists );\n\n\t/**\n\t* Callback invoked after checking for path existence.\n\t*\n\t* @private\n\t* @param {(Error|null)} error - error object\n\t* @param {boolean} bool - boolean indicating if a path exists\n\t* @returns {void}\n\t*/\n\tfunction onExists( error, bool ) { // eslint-disable-line handle-callback-err\n\t\tif ( bool ) {\n\t\t\treturn done( null, spath );\n\t\t}\n\t\t// Resolve a parent directory:\n\t\tchild = dir;\n\t\tdir = resolve( dir, '..' );\n\n\t\t// If we have already reached root, we cannot resolve any higher directories...\n\t\tif ( child === dir ) {\n\t\t\treturn done( null, null );\n\t\t}\n\t\t// Resolve the next search path:\n\t\tspath = resolve( dir, path );\n\t\texists( spath, onExists );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = resolveParentPath;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar resolve = require( 'path' ).resolve;\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar cwd = require( '@stdlib/process/cwd' );\nvar exists = require( './../../exists' ).sync;\nvar format = require( '@stdlib/string/format' );\nvar validate = require( './validate.js' );\n\n\n// MAIN //\n\n/**\n* Synchronously resolves a path by walking parent directories.\n*\n* @param {string} path - path to resolve\n* @param {Options} [options] - function options\n* @param {string} [options.dir] - base directory\n* @throws {TypeError} first argument must be a string\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {(string|null)} resolved path or null\n*\n* @example\n* var path = resolveParentPath( 'package.json' );\n*/\nfunction resolveParentPath( path, options ) {\n\tvar spath;\n\tvar child;\n\tvar opts;\n\tvar dir;\n\tvar err;\n\tif ( !isString( path ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a string. Value: `%s`.', path ) );\n\t}\n\topts = {};\n\tif ( arguments.length > 1 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( opts.dir ) {\n\t\tdir = resolve( cwd(), opts.dir );\n\t} else {\n\t\tdir = cwd();\n\t}\n\t// Start at a base directory and continue moving up through each parent directory until able to resolve a search path or until reaching the root directory...\n\twhile ( child !== dir ) {\n\t\tspath = resolve( dir, path );\n\t\tif ( exists( spath ) ) {\n\t\t\treturn spath;\n\t\t}\n\t\tchild = dir;\n\t\tdir = resolve( dir, '..' );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = resolveParentPath;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Resolve a path by walking parent directories.\n*\n* @module @stdlib/fs/resolve-parent-path\n*\n* @example\n* var resolveParentPath = require( '@stdlib/fs/resolve-parent-path' );\n*\n* resolveParentPath( 'package.json', onPath );\n*\n* function onPath( error, path ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.log( path );\n* }\n*\n* @example\n* var resolveParentPath = require( '@stdlib/fs/resolve-parent-path' );\n*\n* var path = resolveParentPath.sync( 'package.json' );\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar resolveParentPath = require( './async.js' );\nvar sync = require( './sync.js' );\n\n\n// MAIN //\n\nsetReadOnly( resolveParentPath, 'sync', sync );\n\n\n// EXPORTS //\n\nmodule.exports = resolveParentPath;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.dir] - base directory\n* @returns {(Error|null)} error object or null\n*\n* @example\n* var opts = {};\n* var options = {\n*     'dir': '/foo/bar/baz'\n* };\n*\n* var err = validate( opts, options );\n* if ( err ) {\n*    throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'dir' ) ) {\n\t\topts.dir = options.dir;\n\t\tif ( !isString( opts.dir ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'dir', opts.dir ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar resolve = require( 'path' ).resolve;\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar format = require( '@stdlib/string/format' );\nvar cwd = require( '@stdlib/process/cwd' );\nvar exists = require( './../../exists' );\nvar validate = require( './validate.js' );\n\n\n// MAIN //\n\n/**\n* Asynchronously resolves a path according to a predicate function by walking parent directories.\n*\n* @param {string} path - path to resolve\n* @param {Options} [options] - function options\n* @param {string} [options.dir] - base directory\n* @param {Function} predicate - callback which tests whether a resolved path passes a test\n* @param {Function} clbk - callback to invoke after resolving a path\n* @throws {TypeError} first argument must be a string\n* @throws {TypeError} predicate function argument must be a function\n* @throws {TypeError} callback argument must be a function\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n*\n* @example\n* resolveParentPathBy( 'package.json', predicate, onPath );\n*\n* function predicate( path, next ) {\n*     next( null, true );\n* }\n*\n* function onPath( error, path ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.log( path );\n* }\n*/\nfunction resolveParentPathBy( path, options, predicate, clbk ) {\n\tvar spath;\n\tvar child;\n\tvar test;\n\tvar opts;\n\tvar done;\n\tvar dir;\n\tvar err;\n\tif ( !isString( path ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a string. Value: `%s`.', path ) );\n\t}\n\topts = {};\n\tif ( arguments.length > 3 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t\ttest = predicate;\n\t\tdone = clbk;\n\t} else {\n\t\ttest = options;\n\t\tdone = predicate;\n\t}\n\tif ( !isFunction( test ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Predicate function must be a function. Value: `%s`.', test ) );\n\t}\n\tif ( !isFunction( done ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Callback argument must be a function. Value: `%s`.', done ) );\n\t}\n\tif ( opts.dir ) {\n\t\tdir = resolve( cwd(), opts.dir );\n\t} else {\n\t\tdir = cwd();\n\t}\n\tspath = resolve( dir, path );\n\texists( spath, onExists );\n\n\t/**\n\t* Resolves the next candidate path.\n\t*\n\t* @private\n\t* @returns {void}\n\t*/\n\tfunction next() {\n\t\t// Resolve a parent directory:\n\t\tchild = dir;\n\t\tdir = resolve( dir, '..' );\n\n\t\t// If we have already reached root, we cannot resolve any higher directories...\n\t\tif ( child === dir ) {\n\t\t\treturn done( null, null );\n\t\t}\n\t\t// Resolve the next search path:\n\t\tspath = resolve( dir, path );\n\t\texists( spath, onExists );\n\t}\n\n\t/**\n\t* Callback invoked after checking for path existence.\n\t*\n\t* @private\n\t* @param {(Error|null)} error - error object\n\t* @param {boolean} bool - boolean indicating if a path exists\n\t* @returns {void}\n\t*/\n\tfunction onExists( error, bool ) { // eslint-disable-line handle-callback-err\n\t\tif ( bool ) {\n\t\t\treturn test( spath, onTest );\n\t\t}\n\t\tnext();\n\t}\n\n\t/**\n\t* Callback invoked after testing a resolved path.\n\t*\n\t* @private\n\t* @param {(Error|null)} error - error object\n\t* @param {boolean} bool - boolean indicating if a path exists\n\t* @returns {void}\n\t*/\n\tfunction onTest( error, bool ) {\n\t\tif ( error ) {\n\t\t\treturn done( error );\n\t\t}\n\t\tif ( bool ) {\n\t\t\treturn done( null, spath );\n\t\t}\n\t\tnext();\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = resolveParentPathBy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar resolve = require( 'path' ).resolve;\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar cwd = require( '@stdlib/process/cwd' );\nvar exists = require( './../../exists' ).sync;\nvar format = require( '@stdlib/string/format' );\nvar validate = require( './validate.js' );\n\n\n// MAIN //\n\n/**\n* Synchronously resolves a path according to a predicate function by walking parent directories.\n*\n* @param {string} path - path to resolve\n* @param {Options} [options] - function options\n* @param {string} [options.dir] - base directory\n* @param {Function} predicate - callback which tests whether a resolved path passes a test\n* @throws {TypeError} first argument must be a string\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {TypeError} last argument must be a function\n* @returns {(string|null)} resolved path or null\n*\n* @example\n* function predicate() {\n*     return true;\n* }\n*\n* var path = resolveParentPathBy( 'package.json', predicate );\n* // e.g., returns '...'\n*/\nfunction resolveParentPathBy( path, options, predicate ) {\n\tvar spath;\n\tvar child;\n\tvar test;\n\tvar opts;\n\tvar dir;\n\tvar err;\n\tif ( !isString( path ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a string. Value: `%s`.', path ) );\n\t}\n\topts = {};\n\tif ( arguments.length > 2 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t\ttest = predicate;\n\t} else {\n\t\ttest = options;\n\t}\n\tif ( !isFunction( test ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Last argument must be a function. Value: `%s`.', test ) );\n\t}\n\tif ( opts.dir ) {\n\t\tdir = resolve( cwd(), opts.dir );\n\t} else {\n\t\tdir = cwd();\n\t}\n\t// Start at a base directory and continue moving up through each parent directory until able to resolve a search path or until reaching the root directory...\n\twhile ( child !== dir ) {\n\t\tspath = resolve( dir, path );\n\t\tif ( exists( spath ) && test( spath ) ) {\n\t\t\treturn spath;\n\t\t}\n\t\tchild = dir;\n\t\tdir = resolve( dir, '..' );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = resolveParentPathBy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Resolve a path according to a predicate function by walking parent directories.\n*\n* @module @stdlib/fs/resolve-parent-path-by\n*\n* @example\n* var resolveParentPathBy = require( '@stdlib/fs/resolve-parent-path-by' );\n*\n* resolveParentPathBy( 'package.json', predicate, onPath );\n*\n* function predicate( path, next ) {\n*     next( null, true );\n* }\n*\n* function onPath( error, path ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.log( path );\n* }\n*\n* @example\n* var resolveParentPathBy = require( '@stdlib/fs/resolve-parent-path-by' );\n*\n* function predicate() {\n*     return true;\n* }\n*\n* var path = resolveParentPathBy.sync( 'package.json', predicate );\n* // e.g., returns '...'\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar resolveParentPathBy = require( './async.js' );\nvar sync = require( './sync.js' );\n\n\n// MAIN //\n\nsetReadOnly( resolveParentPathBy, 'sync', sync );\n\n\n// EXPORTS //\n\nmodule.exports = resolveParentPathBy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar remove = require( 'fs' ).unlink;\n\n\n// MAIN //\n\n/**\n* Asynchronously removes a directory entry.\n*\n* @param {(string|Buffer|integer)} path - entry path\n* @param {Function} clbk - callback to invoke after removing a directory entry\n*\n* @example\n* function done( error ) {\n*     if ( error ) {\n*         throw error;\n*     }\n* }\n*\n* unlink( './beep/boop.txt', done );\n*/\nfunction unlink( path, clbk ) {\n\tremove( path, clbk );\n}\n\n\n// EXPORTS //\n\nmodule.exports = unlink;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar unlink = require( 'fs' ).unlinkSync; // eslint-disable-line node/no-sync\n\n\n// MAIN //\n\n/**\n* Synchronously removes a directory entry.\n*\n* @param {(string|Buffer|integer)} path - path\n* @returns {(Error|null)} error object or null\n*\n* @example\n* var err = unlinkSync( './beep/boop.txt' );\n* if ( err instanceof Error ) {\n*     throw err;\n* }\n*/\nfunction unlinkSync( path ) {\n\ttry {\n\t\tunlink( path );\n\t} catch ( err ) {\n\t\treturn err;\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = unlinkSync;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Remove a directory entry.\n*\n* @module @stdlib/fs/unlink\n*\n* @example\n* var unlink = require( '@stdlib/fs/unlink' );\n*\n* function done( error ) {\n*     if ( error ) {\n*         throw error;\n*     }\n* }\n*\n* unlink( './beep/boop.txt', done );\n*\n* @example\n* var unlinkSync = require( '@stdlib/fs/unlink' ).sync;\n*\n* var err = unlinkSync( './beep/boop.txt' );\n* if ( err instanceof Error ) {\n*     throw err;\n* }\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar sync = require( './sync.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'sync', sync );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar write = require( 'fs' ).writeFile;\n\n\n// MAIN //\n\n/**\n* Asynchronously writes data to a file.\n*\n* @param {(string|Buffer|integer)} file - file path or file descriptor\n* @param {(string|Buffer)} data - data to write\n* @param {(Object|string)} [options] - options\n* @param {Function} clbk - callback to invoke after writing data to a file\n*\n* @example\n* function onWrite( error ) {\n*     if ( error ) {\n*         throw error;\n*     }\n* }\n*\n* writeFile( './beep/boop.txt', 'beep boop\\n', onWrite );\n*/\nfunction writeFile() {\n\tvar args;\n\tvar i;\n\targs = [];\n\tfor ( i = 0; i < arguments.length; i++ ) {\n\t\targs.push( arguments[ i ] );\n\t}\n\twrite.apply( null, args );\n}\n\n\n// EXPORTS //\n\nmodule.exports = writeFile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar writeFile = require( 'fs' ).writeFileSync; // eslint-disable-line node/no-sync\n\n\n// MAIN //\n\n/**\n* Synchronously writes data to a file.\n*\n* @param {(string|Buffer|integer)} file - file path or file descriptor\n* @param {(string|Buffer)} data - data to write\n* @param {(Object|string)} [options] - options\n* @returns {(Error|null)} error object or null\n*\n* @example\n* var err = writeFileSync( './beep/boop.txt', 'beep boop\\n' );\n* if ( err instanceof Error ) {\n*     throw err;\n* }\n*/\nfunction writeFileSync( file, data, options ) {\n\ttry {\n\t\tif ( arguments.length > 2 ) {\n\t\t\twriteFile( file, data, options );\n\t\t} else {\n\t\t\twriteFile( file, data );\n\t\t}\n\t} catch ( err ) {\n\t\treturn err;\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = writeFileSync;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Write data to a file.\n*\n* @module @stdlib/fs/write-file\n*\n* @example\n* var writeFile = require( '@stdlib/fs/write-file' );\n*\n* function onWrite( error ) {\n*     if ( error ) {\n*         throw error;\n*     }\n* }\n*\n* writeFile( './beep/boop.txt', 'beep boop\\n', onWrite );\n*\n* @example\n* var writeFileSync = require( '@stdlib/fs/write-file' ).sync;\n*\n* var err = writeFileSync( './beep/boop.txt', 'beep boop\\n' );\n* if ( err instanceof Error ) {\n*     throw err;\n* }\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar sync = require( './sync.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'sync', sync );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property' ;\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace fs\n*/\nvar fs = {};\n\n/**\n* @name close\n* @memberof fs\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/fs/close}\n*/\nimport close from './../close';\nsetReadOnly( fs, 'close', close );\n\n/**\n* @name exists\n* @memberof fs\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/fs/exists}\n*/\nimport exists from './../exists';\nsetReadOnly( fs, 'exists', exists );\n\n/**\n* @name open\n* @memberof fs\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/fs/open}\n*/\nimport open from './../open';\nsetReadOnly( fs, 'open', open );\n\n/**\n* @name readDir\n* @memberof fs\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/fs/read-dir}\n*/\nimport readDir from './../read-dir';\nsetReadOnly( fs, 'readDir', readDir );\n\n/**\n* @name readFile\n* @memberof fs\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/fs/read-file}\n*/\nimport readFile from './../read-file';\nsetReadOnly( fs, 'readFile', readFile );\n\n/**\n* @name readFileList\n* @memberof fs\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/fs/read-file-list}\n*/\nimport readFileList from './../read-file-list';\nsetReadOnly( fs, 'readFileList', readFileList );\n\n/**\n* @name readJSON\n* @memberof fs\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/fs/read-json}\n*/\nimport readJSON from './../read-json';\nsetReadOnly( fs, 'readJSON', readJSON );\n\n/**\n* @name readWASM\n* @memberof fs\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/fs/read-wasm}\n*/\nimport readWASM from './../read-wasm';\nsetReadOnly( fs, 'readWASM', readWASM );\n\n/**\n* @name rename\n* @memberof fs\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/fs/rename}\n*/\nimport rename from './../rename';\nsetReadOnly( fs, 'rename', rename );\n\n/**\n* @name resolveParentPath\n* @memberof fs\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/fs/resolve-parent-path}\n*/\nimport resolveParentPath from './../resolve-parent-path';\nsetReadOnly( fs, 'resolveParentPath', resolveParentPath );\n\n/**\n* @name resolveParentPathBy\n* @memberof fs\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/fs/resolve-parent-path-by}\n*/\nimport resolveParentPathBy from './../resolve-parent-path-by';\nsetReadOnly( fs, 'resolveParentPathBy', resolveParentPathBy );\n\n/**\n* @name unlink\n* @memberof fs\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/fs/unlink}\n*/\nimport unlink from './../unlink';\nsetReadOnly( fs, 'unlink', unlink );\n\n/**\n* @name writeFile\n* @memberof fs\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/fs/write-file}\n*/\nimport writeFile from './../write-file';\nsetReadOnly( fs, 'writeFile', writeFile );\n\n\n// EXPORTS //\n\nexport default fs;\n"],"names":["native","require$$0","close","isNonNegativeInteger","require$$1","isPrimitive","isFunction","require$$2","format","require$$3","main","fd","clbk","TypeError","closeSync","err","fcn","lib","fs","access","stat","async","path","error","length","accessSync","statSync","exists","op","open","defaults","flags","mode","nargs","arguments","openSync","sync","readdir","args","i","push","apply","readdirSync","readDir","readfile","readFile","readfileSync","readFileSync","file","options","f","pow","delay_1","retries","max","d","clear_timeout","clearTimeout","objectKeys","cancelTimeout","clear_pending","pending","keys","logger","isStringArray","primitives","copy","require$$4","require$$5","config","require$$6","delay","require$$7","clearPending","require$$8","debug","MAX_RETRIES","max_retries","MAX_DELAY","max_delay","list","results","errFLG","count","opts","len","cb","Array","getCallback","idx","k","retry","onRead","data","message","code","done","Error","setTimeout","readFileList","isString","isObject","removeBOM","parseJSON","instanceOf","encoding","toString","reviver","readJSON","isUint8Array","Uint8Array","readWASM","out","rename","oldPath","newPath","renameSync","hasOwnProp","validate_1","dir","resolve","cwd","validate","spath","child","onExists","bool","resolveParentPath","predicate","test","next","onTest","resolveParentPathBy","remove","unlink","unlinkSync","write","writeFile","writeFileSync","setReadOnly"],"mappings":"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"}