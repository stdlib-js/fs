{"version":3,"file":"index.mjs","sources":["../append-file/lib/async.js","../append-file/lib/sync.js","../append-file/lib/index.js","../close/lib/main.js","../close/lib/sync.js","../close/lib/index.js","../exists/lib/async.js","../exists/lib/sync.js","../exists/lib/index.js","../open/lib/main.js","../open/lib/sync.js","../open/lib/index.js","../read-dir/lib/async.js","../read-dir/lib/sync.js","../read-dir/lib/index.js","../read-file/lib/main.js","../read-file/lib/sync.js","../read-file/lib/index.js","../read-file-list/lib/clear_timeout.js","../read-file-list/lib/async.js","../read-file-list/lib/delay.js","../read-file-list/lib/clear_pending.js","../read-file-list/lib/sync.js","../read-json/lib/async.js","../read-ndjson/lib/async.js","../read-wasm/lib/async.js","../read-file-list/lib/index.js","../read-json/lib/index.js","../read-json/lib/sync.js","../read-ndjson/lib/index.js","../read-ndjson/lib/sync.js","../read-wasm/lib/index.js","../read-wasm/lib/sync.js","../rename/lib/main.js","../rename/lib/sync.js","../rename/lib/index.js","../resolve-parent-path/lib/validate.js","../resolve-parent-path/lib/async.js","../resolve-parent-path/lib/sync.js","../resolve-parent-path-by/lib/validate.js","../resolve-parent-path/lib/index.js","../resolve-parent-path-by/lib/async.js","../resolve-parent-path-by/lib/sync.js","../resolve-parent-path-by/lib/index.js","../resolve-parent-paths/lib/validate.js","../resolve-parent-paths/lib/main.js","../resolve-parent-paths/lib/sync.js","../resolve-parent-paths/lib/index.js","../unlink/lib/main.js","../unlink/lib/sync.js","../unlink/lib/index.js","../write-file/lib/main.js","../write-file/lib/sync.js","../write-file/lib/index.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar append = require( 'fs' ).appendFile;\n\n\n// MAIN //\n\n/**\n* Asynchronously append data to a file, creating the file if it does not yet exist.\n*\n* @param {(string|Buffer|integer)} path - file path or file descriptor\n* @param {(string|Buffer)} data - data to append\n* @param {(Object|string)} [options] - options\n* @param {Function} clbk - callback to invoke after appending data to the file\n*\n* @example\n* function onAppend( err ) {\n*     if ( err ) {\n*         console.log( err.message );\n*     }\n* }\n*\n* appendFile( './beep/boop.txt', 'appended something\\n', onAppend );\n*/\nfunction appendFile() {\n\tvar args;\n\tvar i;\n\targs = [];\n\tfor ( i = 0; i < arguments.length; i++ ) {\n\t\targs.push( arguments[i] );\n\t}\n\tappend.apply( null, args );\n}\n\n\n// EXPORTS //\n\nexport default appendFile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar appendFile = require( 'fs' ).appendFileSync; // eslint-disable-line node/no-sync\n\n\n// MAIN //\n\n/**\n* Synchronously append data to a file, creating the file if it does not yet exist.\n*\n* @param {(string|Buffer|integer)} path - file path or file descriptor\n* @param {(string|Buffer)} data - data to append\n* @param {(Object|string)} [options] - options\n* @returns {(Error|null)} error object or null\n*\n* @example\n* var err = appendFileSync( './beep/boop.txt', 'data to append\\n' );\n* if ( err instanceof Error ) {\n*     throw err;\n* }\n*/\nfunction appendFileSync( path, data, options ) {\n\ttry {\n\t\tif ( arguments.length > 2 ) {\n\t\t\tappendFile( path, data, options );\n\t\t} else {\n\t\t\tappendFile( path, data );\n\t\t}\n\t} catch ( err ) {\n\t\treturn err;\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default appendFileSync;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Append data to a file.\n*\n* @module @stdlib/fs/append-file\n*\n* @example\n* import appendFile from '@stdlib/fs/append-file';\n*\n* function onAppend( err ) {\n*     if ( err ) {\n*         console.log( err.message );\n*     }\n* }\n*\n* appendFile( './beep/boop.txt', 'appended something\\n', onAppend );\n*\n* @example\n* import { sync as appendFileSync } from '@stdlib/fs/append-file';\n*\n* var err = appendFileSync( './beep/boop.txt', 'data to append\\n' );\n* if ( err instanceof Error ) {\n*     throw err;\n* }\n*/\n\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport async from './async.js';\nimport sync from './sync.js';\n\n\n// MAIN //\n\nsetReadOnly( async, 'sync', sync );\n\n\n// EXPORTS //\n\nexport default async;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar native = require( 'fs' ).close;\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert/is-nonnegative-integer';\nimport isFunction from '@stdlib/assert/is-function';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Asynchronously closes a file descriptor.\n*\n* @param {NonNegativeInteger} fd - file descriptor\n* @param {Function} clbk - callback to invoke after closing a file descriptor\n* @throws {TypeError} first argument must be a valid file descriptor (nonnegative integer)\n* @throws {TypeError} last argument must be a function\n*\n* @example\n* import { sync as openSync } from '@stdlib/fs/open';\n*\n* function done( error ) {\n*     if ( error ) {\n*         throw error;\n*     }\n* }\n*\n* var fd = openSync( __filename, 'r+' );\n* if ( fd instanceof Error ) {\n*     throw fd;\n* }\n*\n* close( fd, done );\n*/\nfunction close( fd, clbk ) { // eslint-disable-line stdlib/no-redeclare\n\tif ( !isNonNegativeInteger( fd ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a valid file descriptor (i.e., nonnegative integer). Value: `%s`.', fd ) );\n\t}\n\tif ( !isFunction( clbk ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Last argument must be a function. Value: `%s`.', clbk ) );\n\t}\n\tnative( fd, clbk );\n}\n\n\n// EXPORTS //\n\nexport default close;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar close = require( 'fs' ).closeSync; // eslint-disable-line node/no-sync, stdlib/no-redeclare\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert/is-nonnegative-integer';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Synchronously closes a file descriptor.\n*\n* @param {NonNegativeInteger} fd - file descriptor\n* @throws {TypeError} must provide a valid file descriptor (nonnegative integer)\n* @returns {(Error|void)} an error object or `undefined`\n*\n* @example\n* import { sync as openSync } from '@stdlib/fs/open';\n*\n* var fd = openSync( __filename, 'r+' );\n*\n* if ( fd instanceof Error ) {\n*     throw fd;\n* }\n*\n* var err = closeSync( fd );\n* if ( err instanceof Error ) {\n*     throw err;\n* }\n*/\nfunction closeSync( fd ) {\n\tif ( !isNonNegativeInteger( fd ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a valid file descriptor (i.e., a nonnegative integer). Value: `%s`.', fd ) );\n\t}\n\ttry {\n\t\tclose( fd );\n\t} catch ( err ) {\n\t\treturn err;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default closeSync;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Close a file descriptor.\n*\n* @module @stdlib/fs/close\n*\n* @example\n* import { sync as openSync } from '@stdlib/fs/open';\n* import close from '@stdlib/fs/close';\n*\n* function done( error ) {\n*     if ( error ) {\n*         throw error;\n*     }\n* }\n*\n* var fd = openSync( __filename, 'r+' );\n* if ( fd instanceof Error ) {\n*     throw fd;\n* }\n*\n* close( fd, done );\n*\n* @example\n* import { sync as openSync } from '@stdlib/fs/open';\n* import { sync as closeSync } from '@stdlib/fs/close';\n*\n* var fd = openSync( __filename, 'r+' );\n*\n* if ( fd instanceof Error ) {\n*     throw fd;\n* }\n*\n* var err = closeSync( fd );\n* if ( err instanceof Error ) {\n*     throw err;\n* }\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport sync from './sync.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'sync', sync );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar fs = require( 'fs' );\n\n\n// FUNCTIONS //\n\nvar fcn;\nif ( typeof fs.access === 'function' ) {\n\tfcn = fs.access;\n} else {\n\tfcn = fs.stat;\n}\n\n\n// MAIN //\n\n/**\n* Tests whether a path exists on the filesystem.\n*\n* @param {(string|Buffer)} path - path to test\n* @param {Function} clbk - callback to invoke after testing path existence\n*\n* @example\n* exists( __dirname, done );\n*\n* function done( error, bool ) {\n*     if ( error ) {\n*         console.error( error );\n*     }\n*     if ( bool ) {\n*         console.log( '...path exists.' );\n*     } else {\n*         console.log( '...path does not exist.' );\n*     }\n* }\n*/\nfunction exists( path, clbk ) {\n\tfcn( path, done );\n\n\t/**\n\t* Callback invoked upon performing a filesystem call.\n\t*\n\t* @private\n\t* @param {(Error|null)} error - error object\n\t* @returns {void}\n\t*/\n\tfunction done( error ) {\n\t\tif ( clbk.length === 2 ) {\n\t\t\tif ( error ) {\n\t\t\t\treturn clbk( error, false );\n\t\t\t}\n\t\t\treturn clbk( null, true );\n\t\t}\n\t\tif ( error ) {\n\t\t\treturn clbk( false );\n\t\t}\n\t\treturn clbk( true );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default exists;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-sync */\n\n'use strict';\n\n// MODULES //\n\nvar fs = require( 'fs' );\n\n\n// FUNCTIONS //\n\nvar fcn;\nif ( typeof fs.accessSync === 'function' ) {\n\tfcn = fs.accessSync;\n} else {\n\tfcn = fs.statSync;\n}\n\n\n// MAIN //\n\n/**\n* Synchronously tests whether a path exists on the filesystem.\n*\n* @param {(string|Buffer)} path - path to test\n* @returns {boolean} boolean indicating whether the path exists\n*\n* @example\n* var bool = existsSync( __dirname );\n* // returns <boolean>\n*/\nfunction existsSync( path ) {\n\ttry {\n\t\tfcn( path );\n\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\treturn false;\n\t}\n\treturn true;\n}\n\n\n// EXPORTS //\n\nexport default existsSync;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test whether a path exists on the filesystem. For more information, see the [archive][1].\n*\n* [1]: https://github.com/nodejs/node-v0.x-archive/blob/d8baf8a2a4481940bfed0196308ae6189ca18eee/lib/fs.js#L222\n*\n* @module @stdlib/fs/exists\n*\n* @example\n* import exists from '@stdlib/fs/exists';\n*\n* exists( __dirname, done );\n* exists( 'beepboop', done );\n*\n* function done( error, bool ) {\n*     if ( error ) {\n*         console.error( error.message );\n*     } else {\n*         console.log( bool );\n*     }\n* }\n*\n* @example\n* import { sync as existsSync } from '@stdlib/fs/exists';\n*\n* console.log( existsSync( __dirname ) );\n* // => true\n*\n* console.log( existsSync( 'beepboop' ) );\n* // => false\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport exists from './async.js';\nimport sync from './sync.js';\n\n\n// MAIN //\n\nsetReadOnly( exists, 'sync', sync );\n\n\n// EXPORTS //\n\nexport default exists;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar op = require( 'fs' ).open;\nimport defaults from './defaults.json';\n\n\n// MAIN //\n\n/**\n* Asynchronously opens a file.\n*\n* @param {(string|Buffer)} path - file path\n* @param {(string|number)} [flags='r'] - file system flags\n* @param {integer} [mode=0o666] - file mode\n* @param {Function} clbk - callback to invoke after opening a file\n* @returns {void}\n*\n* @example\n* import { sync as closeSync } from '@stdlib/fs/close';\n* import open from '@stdlib/fs/open';\n*\n* function onOpen( error, fd ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     closeSync( fd );\n* }\n* open( __filename, onOpen );\n*/\nfunction open( path, flags, mode, clbk ) { // eslint-disable-line stdlib/no-redeclare\n\tvar nargs = arguments.length;\n\tif ( nargs === 2 ) {\n\t\treturn op( path, defaults.flags, defaults.mode, flags );\n\t}\n\tif ( nargs === 3 ) {\n\t\treturn op( path, flags, defaults.mode, mode );\n\t}\n\top( path, flags, mode, clbk );\n}\n\n\n// EXPORTS //\n\nexport default open;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar open = require( 'fs' ).openSync; // eslint-disable-line node/no-sync, stdlib/no-redeclare\nimport defaults from './defaults.json';\n\n\n// MAIN //\n\n/**\n* Synchronously opens a file.\n*\n* @param {(string|Buffer)} path - file path\n* @param {(string|number)} [flags='r'] - file system flags\n* @param {integer} [mode=0o666] - file mode\n* @returns {(integer|Error)} file descriptor or an error\n*\n* @example\n* import { sync as closeSync } from '@stdlib/fs/close';\n*\n* var fd = openSync( __filename );\n* if ( fd instanceof Error ) {\n*     throw fd;\n* }\n* closeSync( fd );\n*/\nfunction openSync( path, flags, mode ) {\n\tvar nargs;\n\tvar fd;\n\n\tnargs = arguments.length;\n\ttry {\n\t\tif ( nargs === 1 ) {\n\t\t\tfd = open( path, defaults.flags, defaults.mode );\n\t\t} else if ( nargs === 2 ) {\n\t\t\tfd = open( path, flags, defaults.mode );\n\t\t} else {\n\t\t\tfd = open( path, flags, mode );\n\t\t}\n\t} catch ( err ) {\n\t\treturn err;\n\t}\n\treturn fd;\n}\n\n\n// EXPORTS //\n\nexport default openSync;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Open a file.\n*\n* @module @stdlib/fs/open\n*\n* @example\n* import { sync as closeSync } from '@stdlib/fs/close';\n* import open from '@stdlib/fs/open';\n*\n* function onOpen( error, fd ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     closeSync( fd );\n* }\n* open( __filename, onOpen );\n*\n* @example\n* import { sync as closeSync } from '@stdlib/fs/close';\n* import { sync as openSync } from '@stdlib/fs/open';\n*\n* var fd = openSync( __filename );\n* if ( fd instanceof Error ) {\n*     throw fd;\n* }\n* closeSync( fd );\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport sync from './sync.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'sync', sync );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar readdir = require( 'fs' ).readdir;\n\n\n// MAIN //\n\n/**\n* Asynchronously reads the contents of a directory.\n*\n* @param {(string|Buffer)} path - directory path\n* @param {Function} clbk - callback to invoke after reading directory contents\n*\n* @example\n* function onRead( error, data ) {\n*     if ( error ) {\n*         console.error( error );\n*     } else {\n*         console.log( data );\n*     }\n* }\n* readDir( __dirname, onRead );\n*/\nfunction readDir() {\n\tvar args;\n\tvar i;\n\targs = [];\n\tfor ( i = 0; i < arguments.length; i++ ) {\n\t\targs.push( arguments[ i ] );\n\t}\n\treaddir.apply( null, args );\n}\n\n\n// EXPORTS //\n\nexport default readDir;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar readdirSync = require( 'fs' ).readdirSync; // eslint-disable-line node/no-sync\n\n\n// MAIN //\n\n/**\n* Synchronously reads the contents of a directory.\n*\n* @param {(string|Buffer)} path - directory path\n* @returns {(StringArray|Error)} directory contents or an error\n*\n* @example\n* var out = readDirSync( __dirname );\n* if ( out instanceof Error ) {\n*     throw out;\n* }\n* console.log( out );\n*/\nfunction readDirSync( path ) {\n\ttry {\n\t\treturn readdirSync( path );\n\t} catch ( err ) {\n\t\treturn err;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default readDirSync;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Read the contents of a directory.\n*\n* @module @stdlib/fs/read-dir\n*\n* @example\n* import readDir from '@stdlib/fs/read-dir';\n*\n* function onRead( error, data ) {\n*     if ( error ) {\n*         console.error( error );\n*     } else {\n*         console.log( data );\n*     }\n* }\n* readDir( __dirname, onRead );\n*\n* @example\n* import { sync as readDirSync } from '@stdlib/fs/read-dir';\n*\n* var out = readDirSync( __dirname );\n* if ( out instanceof Error ) {\n*     throw out;\n* }\n* console.log( out );\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport readDir from './async.js';\nimport sync from './sync.js';\n\n\n// MAIN //\n\nsetReadOnly( readDir, 'sync', sync );\n\n\n// EXPORTS //\n\nexport default readDir;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar readfile = require( 'fs' ).readFile;\n\n\n// MAIN //\n\n/**\n* Asynchronously reads the entire contents of a file.\n*\n* @param {(string|Buffer|integer)} file - file path or file descriptor\n* @param {(Object|string)} [options] - options\n* @param {(string|null)} [options.encoding] - file encoding\n* @param {string} [options.flag] - file status flag\n* @param {Function} clbk - callback to invoke after reading file contents\n*\n* @example\n* function onFile( error, data ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.log( data );\n* }\n* readFile( __filename, onFile );\n*/\nfunction readFile() {\n\tvar args;\n\tvar i;\n\targs = [];\n\tfor ( i = 0; i < arguments.length; i++ ) {\n\t\targs.push( arguments[ i ] );\n\t}\n\treadfile.apply( null, args );\n}\n\n\n// EXPORTS //\n\nexport default readFile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar readfileSync = require( 'fs' ).readFileSync; // eslint-disable-line node/no-sync\n\n\n// MAIN //\n\n/**\n* Synchronously reads the entire contents of a file.\n*\n* @param {(string|Buffer|integer)} file - file path or file descriptor\n* @param {(Object|string)} [options] - options\n* @param {(string|null)} [options.encoding] - file encoding\n* @param {string} [options.flag] - file status flag\n* @returns {(Buffer|string|Error)} file contents or an error\n*\n* @example\n* var out = readFileSync( __filename );\n* if ( out instanceof Error ) {\n*     throw out;\n* }\n* console.log( out );\n*/\nfunction readFileSync( file, options ) {\n\tvar f;\n\ttry {\n\t\tif ( arguments.length > 1 ) {\n\t\t\tf = readfileSync( file, options );\n\t\t} else {\n\t\t\tf = readfileSync( file );\n\t\t}\n\t} catch ( err ) {\n\t\treturn err;\n\t}\n\treturn f;\n}\n\n\n// EXPORTS //\n\nexport default readFileSync;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Read the entire contents of a file.\n*\n* @module @stdlib/fs/read-file\n*\n* @example\n* import readFile from '@stdlib/fs/read-file';\n*\n* function onFile( error, data ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.log( data );\n* }\n* readFile( __filename, onFile );\n*\n* @example\n* import { sync as readFileSync } from '@stdlib/fs/read-file';\n*\n* var out = readFileSync( __filename );\n* if ( out instanceof Error ) {\n*     throw out;\n* }\n* console.log( out );\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport sync from './sync.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'sync', sync );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// EXPORTS //\n\nexport default clearTimeout;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\nimport { primitives as isStringArray } from '@stdlib/assert/is-string-array';\nimport { isPrimitive as isString } from '@stdlib/assert/is-string';\nimport isFunction from '@stdlib/assert/is-function';\nimport assign from '@stdlib/object/assign';\nimport readFile from './../../read-file';\nimport format from '@stdlib/string/format';\nimport config from './config.json';\nimport delay from './delay.js';\nimport clearPending from './clear_pending.js';\n\n\n// VARIABLES //\n\nvar debug = logger( 'read-file-list:async' );\nvar MAX_RETRIES = config.max_retries;\nvar MAX_DELAY = config.max_delay;\n\n\n// MAIN //\n\n/**\n* Asynchronously reads the entire contents of each file in a file list.\n*\n* @param {StringArray} list - list of file paths\n* @param {(Object|string)} [options] - options\n* @param {(string|null)} [options.encoding] - file encoding\n* @param {string} [options.flag] - file status flag\n* @param {Function} clbk - callback to invoke after reading file contents\n* @throws {TypeError} first argument must be an array of strings\n* @throws {TypeError} callback argument must be a function\n*\n* @example\n* var list = [ __filename ];\n*\n* readFileList( list, onFiles );\n*\n* function onFiles( error, files ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.dir( files );\n* }\n*/\nfunction readFileList( list, options, clbk ) {\n\tvar pending;\n\tvar results;\n\tvar errFLG;\n\tvar count;\n\tvar opts;\n\tvar len;\n\tvar cb;\n\tvar i;\n\n\tif ( !isStringArray( list ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an array of strings. Value: `%s`.', list ) );\n\t}\n\tif ( arguments.length < 3 ) {\n\t\topts = {};\n\t\tcb = options;\n\t} else {\n\t\tif ( isString( options ) ) {\n\t\t\topts = options;\n\t\t} else {\n\t\t\topts = assign( {}, options );\n\t\t}\n\t\tcb = clbk;\n\t}\n\tif ( !isFunction( cb ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Callback argument must be a function. Value: `%s`.', cb ) );\n\t}\n\tlen = list.length;\n\n\tresults = new Array( len );\n\tpending = {};\n\tcount = 0;\n\n\tdebug( 'Reading %d files...', len );\n\tfor ( i = 0; i < len; i++ ) {\n\t\tdebug( 'Reading file: %s (%d of %d).', list[ i ], i+1, len );\n\t\treadFile( list[ i ], opts, getCallback( i ) );\n\t}\n\n\t/**\n\t* Returns a callback to be invoked upon reading a file.\n\t*\n\t* @private\n\t* @param {NonNegativeInteger} idx - index\n\t* @returns {Callback} callback\n\t*/\n\tfunction getCallback( idx ) {\n\t\tvar retries;\n\t\tvar file;\n\t\tvar k;\n\n\t\tfile = list[ idx ];\n\t\tk = idx + 1;\n\t\tretries = 0;\n\n\t\t/**\n\t\t* Retries reading a file.\n\t\t*\n\t\t* @private\n\t\t*/\n\t\tfunction retry() {\n\t\t\tdelete pending[ idx ];\n\t\t\tdebug( 'Reading file: %s (%d of %d). Retry: %d of %d.', file, k, len, retries, MAX_RETRIES );\n\t\t\treadFile( file, opts, onRead );\n\t\t}\n\n\t\t/**\n\t\t* Callback to be invoked upon reading a file.\n\t\t*\n\t\t* @private\n\t\t* @param {(Error|null)} error - error object\n\t\t* @param {(Buffer|string)} data - file data\n\t\t* @returns {void}\n\t\t*/\n\t\tfunction onRead( error, data ) {\n\t\t\tvar d;\n\t\t\tif ( errFLG ) {\n\t\t\t\tdebug( 'An error has already been returned. Discarding data for file: %s (%d of %d).', file, k, len );\n\t\t\t\treturn; // prevents `done()` from being called more than once\n\t\t\t}\n\t\t\tif ( error ) {\n\t\t\t\tdebug( 'Encountered an error when reading %s (%d of %d). Error: %s', file, k, len, error.message );\n\t\t\t\tif (\n\t\t\t\t\terror.code === 'EMFILE' || // current process\n\t\t\t\t\terror.code === 'ENFILE'    // across entire system\n\t\t\t\t) {\n\t\t\t\t\tretries += 1;\n\t\t\t\t\tif ( retries > MAX_RETRIES ) {\n\t\t\t\t\t\tdebug( 'Maximum number of retries exceeded. Too many open files.' );\n\t\t\t\t\t\terror = new Error( 'unexpected error. Max retries exceeded. Too many open files.' );\n\t\t\t\t\t\treturn done( error );\n\t\t\t\t\t}\n\t\t\t\t\td = delay( retries, MAX_DELAY );\n\t\t\t\t\tdebug( 'Too many open files. Will retry reading file %d of %d in %s seconds.', k, len, d/1000 );\n\t\t\t\t\tpending[ idx ] = setTimeout( retry, d );\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\treturn done( error );\n\t\t\t}\n\t\t\tdebug( 'Successfully read file: %s (%d of %d).', file, k, len );\n\t\t\tresults[ idx ] = {\n\t\t\t\t'file': file,\n\t\t\t\t'data': data\n\t\t\t};\n\t\t\tcount += 1;\n\t\t\tdebug( 'Read %d of %d files.', count, len );\n\t\t\tif ( count === len ) {\n\t\t\t\treturn done();\n\t\t\t}\n\t\t}\n\n\t\treturn onRead;\n\t}\n\n\t/**\n\t* Callback invoked upon completion.\n\t*\n\t* @private\n\t* @param {Error} [error] - error object\n\t* @returns {void}\n\t*/\n\tfunction done( error ) {\n\t\tclearPending( pending );\n\t\tif ( error ) {\n\t\t\terrFLG = true;\n\t\t\treturn cb( error );\n\t\t}\n\t\tdebug( 'Successfully read all files.' );\n\t\tcb( null, results );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default readFileList;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport pow from '@stdlib/math/base/special/pow';\n\n\n// MAIN //\n\n/**\n* Computes an exponential delay.\n*\n* @private\n* @param {NonNegativeInteger} retries - number of retries\n* @param {number} max - maximum delay\n* @returns {NonNegativeInteger} exponential delay\n*/\nfunction delay( retries, max ) {\n\tvar d = pow( 2, retries ) - 1;\n\tif ( d > max ) {\n\t\td = max;\n\t}\n\treturn d;\n}\n\n\n// EXPORTS //\n\nexport default delay;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport objectKeys from '@stdlib/utils/keys';\nimport cancelTimeout from './clear_timeout.js';\n\n\n// MAIN //\n\n/**\n* Clears pending timeouts.\n*\n* @private\n* @param {Object} pending - hash containing pending timeout ids\n*/\nfunction clearPending( pending ) {\n\tvar keys;\n\tvar i;\n\tkeys = objectKeys( pending );\n\tfor ( i = 0; i < keys.length; i++ ) {\n\t\tcancelTimeout( pending[ keys[i] ] );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default clearPending;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\nimport { sync as readFile } from './../../read-file';\nimport { primitives as isStringArray } from '@stdlib/assert/is-string-array';\nimport format from '@stdlib/string/format';\n\n\n// VARIABLES //\n\nvar debug = logger( 'read-file-list:sync' );\n\n\n// MAIN //\n\n/**\n* Synchronously reads the entire contents of each file in a file list.\n*\n* @param {StringArray} list - list of file paths\n* @param {(Object|string)} [options] - options\n* @param {(string|null)} [options.encoding] - file encoding\n* @param {string} [options.flag] - file status flag\n* @throws {TypeError} must provide an array of strings\n* @returns {ObjectArray} file contents\n*\n* @example\n* var list = [ __filename ];\n* var files = readFileListSync( list );\n*\n* if ( files instanceof Error ) {\n*     throw files;\n* }\n* console.dir( files );\n*/\nfunction readFileListSync( list, options ) {\n\tvar results;\n\tvar opts;\n\tvar file;\n\tvar len;\n\tvar i;\n\n\tif ( !isStringArray( list ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an array of strings. Value: `%s`.', list ) );\n\t}\n\tif ( arguments.length > 1 ) {\n\t\topts = options;\n\t} else {\n\t\topts = {};\n\t}\n\tlen = list.length;\n\tresults = new Array( len );\n\n\tdebug( 'Reading %d files...', len );\n\tfor ( i = 0; i < len; i++ ) {\n\t\tdebug( 'Reading file: %s (%d of %d).', list[ i ], i+1, len );\n\t\tfile = readFile( list[ i ], opts );\n\t\tif ( file instanceof Error ) {\n\t\t\tdebug( 'Encountered an error when reading file: %s (%d of %d). Error: %s', list[ i ], i, len, file.message );\n\t\t\treturn file;\n\t\t}\n\t\tdebug( 'Successfully read file: %s (%d of %d).', list[ i ], i, len );\n\t\tresults[ i ] = {\n\t\t\t'file': list[ i ],\n\t\t\t'data': file\n\t\t};\n\t}\n\tdebug( 'Finished reading files.' );\n\treturn results;\n}\n\n\n// EXPORTS //\n\nexport default readFileListSync;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isString } from '@stdlib/assert/is-string';\nimport isObject from '@stdlib/assert/is-plain-object';\nimport isFunction from '@stdlib/assert/is-function';\nimport readFile from './../../read-file';\nimport removeBOM from '@stdlib/string/remove-utf8-bom';\nimport parseJSON from '@stdlib/utils/parse-json';\nimport instanceOf from '@stdlib/assert/instance-of';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Asynchronously reads a file as JSON.\n*\n* @param {(string|Buffer|integer)} file - file path or file descriptor\n* @param {(Options|string)} [options] - options\n* @param {(string|null)} [options.encoding] - file encoding\n* @param {string} [options.flag] - file status flag\n* @param {Function} [options.reviver] - JSON reviver\n* @param {Callback} clbk - callback\n* @throws {TypeError} options argument must be either a string or an object\n* @throws {TypeError} callback argument must be a function\n*\n* @example\n* var resolve = require( 'path' ).resolve;\n*\n* readJSON( resolve( __dirname, '..', 'package.json' ), onJSON );\n*\n* function onJSON( error, data ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.dir( data );\n* }\n*/\nfunction readJSON( file, options, clbk ) {\n\tvar opts;\n\tvar done;\n\tif ( arguments.length < 3 ) {\n\t\topts = {};\n\t\tdone = options;\n\t} else {\n\t\tif ( isString( options ) ) {\n\t\t\topts = {\n\t\t\t\t'encoding': options\n\t\t\t};\n\t\t} else {\n\t\t\tif ( !isObject( options ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be either a string or an object. Value: `%s`.', options ) );\n\t\t\t}\n\t\t\topts = options;\n\t\t}\n\t\tdone = clbk;\n\t}\n\tif ( !isFunction( done ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Callback argument must be a function. Value: `%s`.', done ) );\n\t}\n\treadFile( file, opts, onRead );\n\n\t/**\n\t* Callback invoked upon reading a file.\n\t*\n\t* @private\n\t* @param {(Error|null)} error - error object\n\t* @param {(Buffer|string)} file - file contents\n\t* @returns {void}\n\t*/\n\tfunction onRead( error, file ) {\n\t\tif ( error ) {\n\t\t\treturn done( error );\n\t\t}\n\t\tfile = file.toString();\n\t\tif ( opts.encoding === 'utf8' ) {\n\t\t\tfile = removeBOM( file );\n\t\t}\n\t\tif ( opts.reviver ) {\n\t\t\tfile = parseJSON( file, opts.reviver );\n\t\t} else {\n\t\t\tfile = parseJSON( file );\n\t\t}\n\t\tif ( instanceOf( file, Error ) ) {\n\t\t\treturn done( file );\n\t\t}\n\t\tdone( null, file );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default readJSON;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isString } from '@stdlib/assert/is-string';\nimport isObject from '@stdlib/assert/is-plain-object';\nimport isFunction from '@stdlib/assert/is-function';\nimport readFile from './../../read-file';\nimport removeBOM from '@stdlib/string/remove-utf8-bom';\nimport parseNDJSON from '@stdlib/utils/parse-ndjson';\nimport instanceOf from '@stdlib/assert/instance-of';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Asynchronously reads a file as newline-delimited JSON.\n*\n* @param {(string|Buffer|integer)} file - file path or file descriptor\n* @param {(Options|string)} [options] - options\n* @param {(string|null)} [options.encoding] - file encoding\n* @param {string} [options.flag] - file status flag\n* @param {Function} [options.reviver] - JSON reviver\n* @param {Callback} clbk - callback\n* @throws {TypeError} options argument must be either a string or an object\n* @throws {TypeError} callback argument must be a function\n*\n* @example\n* var resolve = require( 'path' ).resolve;\n*\n* readNDJSON( resolve( __dirname, '..', 'examples', 'fixtures', 'file.ndjson' ), onNDJSON );\n*\n* function onNDJSON( error, data ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.dir( data );\n* }\n*/\nfunction readNDJSON( file, options, clbk ) {\n\tvar opts;\n\tvar done;\n\tif ( arguments.length < 3 ) {\n\t\topts = {};\n\t\tdone = options;\n\t} else {\n\t\tif ( isString( options ) ) {\n\t\t\topts = {\n\t\t\t\t'encoding': options\n\t\t\t};\n\t\t} else {\n\t\t\tif ( !isObject( options ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be either a string or an object. Value: `%s`.', options ) );\n\t\t\t}\n\t\t\topts = options;\n\t\t}\n\t\tdone = clbk;\n\t}\n\tif ( !isFunction( done ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Callback argument must be a function. Value: `%s`.', done ) );\n\t}\n\treadFile( file, opts, onRead );\n\n\t/**\n\t* Callback invoked upon reading a file.\n\t*\n\t* @private\n\t* @param {(Error|null)} error - error object\n\t* @param {(Buffer|string)} file - file contents\n\t* @returns {void}\n\t*/\n\tfunction onRead( error, file ) {\n\t\tif ( error ) {\n\t\t\treturn done( error );\n\t\t}\n\t\tfile = file.toString();\n\t\tif ( opts.encoding === 'utf8' ) {\n\t\t\tfile = removeBOM( file );\n\t\t}\n\t\tif ( opts.reviver ) {\n\t\t\tfile = parseNDJSON( file, opts.reviver );\n\t\t} else {\n\t\t\tfile = parseNDJSON( file );\n\t\t}\n\t\tif ( instanceOf( file, Error ) ) {\n\t\t\treturn done( file );\n\t\t}\n\t\tdone( null, file );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default readNDJSON;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isObject from '@stdlib/assert/is-plain-object';\nimport isFunction from '@stdlib/assert/is-function';\nimport isUint8Array from '@stdlib/assert/is-uint8array';\nimport readFile from './../../read-file';\nimport Uint8Array from '@stdlib/array/uint8';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Reads the entire contents of a WebAssembly file.\n*\n* @param {(string|Buffer|integer)} file - file path or file descriptor\n* @param {Options} [options] - options\n* @param {string} [options.flag] - file status flag\n* @param {Callback} clbk - callback to invoke after reading a file\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} callback argument must be a function\n*\n* @example\n* var join = require( 'path' ).join;\n* import instanceOf from '@stdlib/assert/instance-of';\n*\n* var fpath = join( __dirname, 'foo.wasm' );\n* readWASM( fpath, onRead );\n*\n* function onRead( error, buf ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.log( buf );\n* }\n*/\nfunction readWASM( file, options, clbk ) {\n\tvar opts;\n\tvar done;\n\tif ( arguments.length < 3 ) {\n\t\topts = {};\n\t\tdone = options;\n\t} else {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = options;\n\t\tdone = clbk;\n\t}\n\tif ( !isFunction( done ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Callback argument must be a function. Value: `%s`.', done ) );\n\t}\n\t// Always override setting the encoding option, as wasm is a binary file format:\n\topts.encoding = null;\n\treadFile( file, opts, onRead );\n\n\t/**\n\t* Callback invoked upon reading a file.\n\t*\n\t* @private\n\t* @param {(Error|null)} error - error object\n\t* @param {(Buffer|string)} file - file contents\n\t* @returns {void}\n\t*/\n\tfunction onRead( error, file ) {\n\t\tvar out;\n\t\tvar i;\n\t\tif ( error ) {\n\t\t\treturn done( error );\n\t\t}\n\t\tif ( isUint8Array( file ) ) {\n\t\t\treturn done( null, file );\n\t\t}\n\t\t// Handle older Node.js environments where Buffer objects are not Uint8Arrays...\n\t\tout = new Uint8Array( file.length );\n\t\tfor ( i = 0; i < file.length; i++ ) {\n\t\t\tout[ i ] = file[ i ];\n\t\t}\n\t\tdone( null, out );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default readWASM;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Read the entire contents of each file in a file list.\n*\n* @module @stdlib/fs/read-file-list\n*\n* @example\n* import readFileList from '@stdlib/fs/read-file-list';\n*\n* var list = [ __filename ];\n*\n* readFileList( list, onFiles );\n*\n* function onFiles( error, files ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.dir( files );\n* }\n*\n* @example\n* import { sync as readFileList } from '@stdlib/fs/read-file-list';\n*\n* var list = [ __filename ];\n* var files = readFileList( list );\n*\n* if ( files instanceof Error ) {\n*     throw files;\n* }\n* console.dir( files );\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport readFileList from './async.js';\nimport sync from './sync.js';\n\n\n// MAIN //\n\nsetReadOnly( readFileList, 'sync', sync );\n\n\n// EXPORTS //\n\nexport default readFileList;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Read a file as JSON.\n*\n* @module @stdlib/fs/read-json\n*\n* @example\n* var resolve = require( 'path' ).resolve;\n* import readJSON from '@stdlib/fs/read-json';\n*\n* function onJSON( error, data ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.dir( data );\n* }\n*\n* readJSON( resolve( __dirname, '..', 'package.json' ), onJSON );\n*\n* @example\n* var resolve = require( 'path' ).resolve;\n* import instanceOf from '@stdlib/assert/instance-of';\n* import readJSON from '@stdlib/fs/read-json';\n*\n* var out = readJSON.sync( resolve( __dirname, '..', 'package.json' ) );\n* if ( instanceOf( out, Error ) ) {\n*     throw out;\n* }\n* console.dir( out );\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport readJSON from './async.js';\nimport sync from './sync.js';\n\n\n// MAIN //\n\nsetReadOnly( readJSON, 'sync', sync );\n\n\n// EXPORTS //\n\nexport default readJSON;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isString } from '@stdlib/assert/is-string';\nimport isObject from '@stdlib/assert/is-plain-object';\nimport { sync as readFile } from './../../read-file';\nimport removeBOM from '@stdlib/string/remove-utf8-bom';\nimport parseJSON from '@stdlib/utils/parse-json';\nimport instanceOf from '@stdlib/assert/instance-of';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Synchronously reads a file as JSON.\n*\n* @param {(string|Buffer|integer)} file - file path or file descriptor\n* @param {(Options|string)} [options] - options\n* @param {(string|null)} [options.encoding] - file encoding\n* @param {string} [options.flag] - file status flag\n* @param {Function} [options.reviver] - JSON reviver\n* @throws {TypeError} options argument must be either a string or an object\n* @returns {(JSON|Error)} JSON or an error\n*\n* @example\n* var resolve = require( 'path' ).resolve;\n* import instanceOf from '@stdlib/assert/instance-of';\n*\n* var out = readJSONSync( resolve( __dirname, '..', 'package.json' ) );\n* if ( instanceOf( out, Error ) ) {\n*     throw out;\n* }\n* console.dir( out );\n*/\nfunction readJSONSync( file, options ) {\n\tvar opts;\n\tvar f;\n\tif ( arguments.length > 1 ) {\n\t\tif ( isString( options ) ) {\n\t\t\topts = {\n\t\t\t\t'encoding': options\n\t\t\t};\n\t\t} else {\n\t\t\tif ( !isObject( options ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be either a string or an object. Value: `%s`.', options ) );\n\t\t\t}\n\t\t\topts = options;\n\t\t}\n\t} else {\n\t\topts = {};\n\t}\n\tf = readFile( file, opts );\n\tif ( instanceOf( f, Error ) ) {\n\t\treturn f;\n\t}\n\tf = f.toString();\n\tif ( opts.encoding === 'utf8' ) {\n\t\tf = removeBOM( f );\n\t}\n\tif ( opts.reviver ) {\n\t\treturn parseJSON( f, opts.reviver );\n\t}\n\treturn parseJSON( f );\n}\n\n\n// EXPORTS //\n\nexport default readJSONSync;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Read a file as newline-delimited JSON.\n*\n* @module @stdlib/fs/read-ndjson\n*\n* @example\n* var resolve = require( 'path' ).resolve;\n* import readNDJSON from '@stdlib/fs/read-ndjson';\n*\n* function clbk( error, data ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.log( data );\n* }\n*\n* readNDJSON( resolve( __dirname, '..', 'examples', 'fixtures', 'file.ndjson' ), clbk );\n*\n* @example\n* var resolve = require( 'path' ).resolve;\n* import instanceOf from '@stdlib/assert/instance-of';\n* import readNDJSON from '@stdlib/fs/read-ndjson';\n*\n* var out = readNDJSON.sync( resolve( __dirname, '..', 'examples', 'fixtures', 'file.ndjson' ) );\n* if ( instanceOf( out, Error ) ) {\n*     throw out;\n* }\n* console.log( out );\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './async.js';\nimport sync from './sync.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'sync', sync );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isString } from '@stdlib/assert/is-string';\nimport isObject from '@stdlib/assert/is-plain-object';\nimport { sync as readFile } from './../../read-file';\nimport removeBOM from '@stdlib/string/remove-utf8-bom';\nimport parseNDJSON from '@stdlib/utils/parse-ndjson';\nimport instanceOf from '@stdlib/assert/instance-of';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Synchronously reads a file as newline-delimited JSON.\n*\n* @param {(string|Buffer|integer)} file - file path or file descriptor\n* @param {(Options|string)} [options] - options\n* @param {(string|null)} [options.encoding] - file encoding\n* @param {string} [options.flag] - file status flag\n* @param {Function} [options.reviver] - JSON reviver\n* @throws {TypeError} options argument must be either a string or an object\n* @returns {(Array|Error)} array of results or an error\n*\n* @example\n* var resolve = require( 'path' ).resolve;\n* import instanceOf from '@stdlib/assert/instance-of';\n*\n* var out = readNDJSONSync( resolve( __dirname, '..', 'examples', 'fixtures', 'file.ndjson' ) );\n* if ( instanceOf( out, Error ) ) {\n*     throw out;\n* }\n* console.dir( out );\n*/\nfunction readNDJSONSync( file, options ) {\n\tvar opts;\n\tvar f;\n\tif ( arguments.length > 1 ) {\n\t\tif ( isString( options ) ) {\n\t\t\topts = {\n\t\t\t\t'encoding': options\n\t\t\t};\n\t\t} else {\n\t\t\tif ( !isObject( options ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be either a string or an object. Value: `%s`.', options ) );\n\t\t\t}\n\t\t\topts = options;\n\t\t}\n\t} else {\n\t\topts = {};\n\t}\n\tf = readFile( file, opts );\n\tif ( instanceOf( f, Error ) ) {\n\t\treturn f;\n\t}\n\tf = f.toString();\n\tif ( opts.encoding === 'utf8' ) {\n\t\tf = removeBOM( f );\n\t}\n\tif ( opts.reviver ) {\n\t\treturn parseNDJSON( f, opts.reviver );\n\t}\n\treturn parseNDJSON( f );\n}\n\n\n// EXPORTS //\n\nexport default readNDJSONSync;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Read the entire contents of a WebAssembly file.\n*\n* @module @stdlib/fs/read-wasm\n*\n* @example\n* var join = require( 'path' ).join;\n* import readWASM from '@stdlib/fs/read-wasm';\n*\n* var fpath = join( __dirname, 'foo.wasm' );\n* readWASM( fpath, onRead );\n*\n* function onRead( error, buf ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.log( out );\n* }\n*\n* @example\n* var join = require( 'path' ).join;\n* import instanceOf from '@stdlib/assert/instance-of';\n* import { sync as readWASMSync } from '@stdlib/fs/read-wasm';\n*\n* var fpath = join( __dirname, 'foo.wasm' );\n* var out = readWASMSync( fpath );\n* if ( instanceOf( out, Error ) ) {\n*     throw out;\n* }\n* console.log( out );\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport readWASM from './async.js';\nimport sync from './sync.js';\n\n\n// MAIN //\n\nsetReadOnly( readWASM, 'sync', sync );\n\n\n// EXPORTS //\n\nexport default readWASM;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isObject from '@stdlib/assert/is-plain-object';\nimport isUint8Array from '@stdlib/assert/is-uint8array';\nimport instanceOf from '@stdlib/assert/instance-of';\nimport { sync as readFileSync } from './../../read-file';\nimport Uint8Array from '@stdlib/array/uint8';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Synchronously reads the entire contents of a WebAssembly file.\n*\n* @param {(string|Buffer|integer)} file - file path or file descriptor\n* @param {Options} [options] - options\n* @param {string} [options.flag] - file status flag\n* @throws {TypeError} options argument must be an object\n* @returns {(Uint8Array|Error)} file contents or an error\n*\n* @example\n* var join = require( 'path' ).join;\n* import instanceOf from '@stdlib/assert/instance-of';\n*\n* var fpath = join( __dirname, 'foo.wasm' );\n* var out = readWASMSync( fpath );\n* if ( instanceOf( out, Error ) ) {\n*     throw out;\n* }\n* console.log( out );\n*/\nfunction readWASMSync( file, options ) {\n\tvar opts;\n\tvar out;\n\tvar f;\n\tvar i;\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\topts = options;\n\t} else {\n\t\topts = {};\n\t}\n\t// Always override setting the encoding option, as wasm is a binary file format:\n\topts.encoding = null;\n\tf = readFileSync( file, opts );\n\tif ( instanceOf( f, Error ) ) {\n\t\treturn f;\n\t}\n\tif ( isUint8Array( f ) ) {\n\t\treturn f;\n\t}\n\t// Handle older Node.js environments where Buffer objects are not Uint8Arrays...\n\tout = new Uint8Array( f.length );\n\tfor ( i = 0; i < f.length; i++ ) {\n\t\tout[ i ] = f[ i ];\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default readWASMSync;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar native = require( 'fs' ).rename;\n\n\n// MAIN //\n\n/**\n* Asynchronously renames a file.\n*\n* @param {(string|Buffer)} oldPath - old path\n* @param {(string|Buffer)} newPath - new path\n* @param {Function} clbk - callback to invoke after renaming a path\n*\n* @example\n* function done( error ) {\n*     if ( error ) {\n*         throw error;\n*     }\n* }\n*\n* rename( './beep/boop.txt', './beep/foo.txt', done );\n*/\nfunction rename( oldPath, newPath, clbk ) {\n\tnative( oldPath, newPath, clbk );\n}\n\n\n// EXPORTS //\n\nexport default rename;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar rename = require( 'fs' ).renameSync; // eslint-disable-line node/no-sync\n\n\n// MAIN //\n\n/**\n* Synchronously renames a file.\n*\n* @param {(string|Buffer)} oldPath - old path\n* @param {(string|Buffer)} newPath - new path\n* @returns {(Error|null)} error object or null\n*\n* @example\n* var err = renameSync( './beep/boop.txt', './beep/foo.txt' );\n* if ( err instanceof Error ) {\n*     throw err;\n* }\n*/\nfunction renameSync( oldPath, newPath ) {\n\ttry {\n\t\trename( oldPath, newPath );\n\t} catch ( err ) {\n\t\treturn err;\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default renameSync;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Rename a file.\n*\n* @module @stdlib/fs/rename\n*\n* @example\n* import rename from '@stdlib/fs/rename';\n*\n* function done( error ) {\n*     if ( error ) {\n*         throw error;\n*     }\n* }\n*\n* rename( './beep/boop.txt', './beep/foo.txt', done );\n*\n* @example\n* import { sync as renameSync } from '@stdlib/fs/rename';\n*\n* var err = renameSync( './beep/boop.txt', './beep/foo.txt' );\n* if ( err instanceof Error ) {\n*     throw err;\n* }\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport sync from './sync.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'sync', sync );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isObject from '@stdlib/assert/is-plain-object';\nimport hasOwnProp from '@stdlib/assert/has-own-property';\nimport { isPrimitive as isString } from '@stdlib/assert/is-string';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.dir] - base directory\n* @returns {(Error|null)} error object or null\n*\n* @example\n* var opts = {};\n* var options = {\n*     'dir': '/foo/bar/baz'\n* };\n*\n* var err = validate( opts, options );\n* if ( err ) {\n*    throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'dir' ) ) {\n\t\topts.dir = options.dir;\n\t\tif ( !isString( opts.dir ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'dir', opts.dir ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar resolve = require( 'path' ).resolve;\nimport { isPrimitive as isString } from '@stdlib/assert/is-string';\nimport isFunction from '@stdlib/assert/is-function';\nimport cwd from '@stdlib/process/cwd';\nimport exists from './../../exists';\nimport format from '@stdlib/string/format';\nimport validate from './validate.js';\n\n\n// MAIN //\n\n/**\n* Asynchronously resolves a path by walking parent directories.\n*\n* @param {string} path - path to resolve\n* @param {Options} [options] - function options\n* @param {string} [options.dir] - base directory\n* @param {Callback} clbk - callback to invoke after resolving a path\n* @throws {TypeError} first argument must be a string\n* @throws {TypeError} callback argument must be a function\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n*\n* @example\n* resolveParentPath( 'package.json', onPath );\n*\n* function onPath( error, path ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.log( path );\n* }\n*/\nfunction resolveParentPath( path, options, clbk ) {\n\tvar spath;\n\tvar child;\n\tvar opts;\n\tvar done;\n\tvar dir;\n\tvar err;\n\tif ( !isString( path ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a string. Value: `%s`.', path ) );\n\t}\n\topts = {};\n\tif ( arguments.length > 2 ) {\n\t\tdone = clbk;\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t} else {\n\t\tdone = options;\n\t}\n\tif ( !isFunction( done ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Callback argument must be a function. Value: `%s`.', done ) );\n\t}\n\tif ( opts.dir ) {\n\t\tdir = resolve( cwd(), opts.dir );\n\t} else {\n\t\tdir = cwd();\n\t}\n\tspath = resolve( dir, path );\n\texists( spath, onExists );\n\n\t/**\n\t* Callback invoked after checking for path existence.\n\t*\n\t* @private\n\t* @param {(Error|null)} error - error object\n\t* @param {boolean} bool - boolean indicating if a path exists\n\t* @returns {void}\n\t*/\n\tfunction onExists( error, bool ) { // eslint-disable-line handle-callback-err\n\t\tif ( bool ) {\n\t\t\treturn done( null, spath );\n\t\t}\n\t\t// Resolve a parent directory:\n\t\tchild = dir;\n\t\tdir = resolve( dir, '..' );\n\n\t\t// If we have already reached root, we cannot resolve any higher directories...\n\t\tif ( child === dir ) {\n\t\t\treturn done( null, null );\n\t\t}\n\t\t// Resolve the next search path:\n\t\tspath = resolve( dir, path );\n\t\texists( spath, onExists );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default resolveParentPath;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar resolve = require( 'path' ).resolve;\nimport { isPrimitive as isString } from '@stdlib/assert/is-string';\nimport cwd from '@stdlib/process/cwd';\nimport { sync as exists } from './../../exists';\nimport format from '@stdlib/string/format';\nimport validate from './validate.js';\n\n\n// MAIN //\n\n/**\n* Synchronously resolves a path by walking parent directories.\n*\n* @param {string} path - path to resolve\n* @param {Options} [options] - function options\n* @param {string} [options.dir] - base directory\n* @throws {TypeError} first argument must be a string\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {(string|null)} resolved path or null\n*\n* @example\n* var path = resolveParentPath( 'package.json' );\n*/\nfunction resolveParentPath( path, options ) {\n\tvar spath;\n\tvar child;\n\tvar opts;\n\tvar dir;\n\tvar err;\n\tif ( !isString( path ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a string. Value: `%s`.', path ) );\n\t}\n\topts = {};\n\tif ( arguments.length > 1 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( opts.dir ) {\n\t\tdir = resolve( cwd(), opts.dir );\n\t} else {\n\t\tdir = cwd();\n\t}\n\t// Start at a base directory and continue moving up through each parent directory until able to resolve a search path or until reaching the root directory...\n\twhile ( child !== dir ) {\n\t\tspath = resolve( dir, path );\n\t\tif ( exists( spath ) ) {\n\t\t\treturn spath;\n\t\t}\n\t\tchild = dir;\n\t\tdir = resolve( dir, '..' );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default resolveParentPath;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isObject from '@stdlib/assert/is-plain-object';\nimport hasOwnProp from '@stdlib/assert/has-own-property';\nimport { isPrimitive as isString } from '@stdlib/assert/is-string';\nimport format from '@stdlib/string/format';\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.dir] - base directory\n* @returns {(Error|null)} error object or null\n*\n* @example\n* var opts = {};\n* var options = {\n*     'dir': '/foo/bar/baz'\n* };\n*\n* var err = validate( opts, options );\n* if ( err ) {\n*    throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'dir' ) ) {\n\t\topts.dir = options.dir;\n\t\tif ( !isString( opts.dir ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'dir', opts.dir ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Resolve a path by walking parent directories.\n*\n* @module @stdlib/fs/resolve-parent-path\n*\n* @example\n* import resolveParentPath from '@stdlib/fs/resolve-parent-path';\n*\n* resolveParentPath( 'package.json', onPath );\n*\n* function onPath( error, path ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.log( path );\n* }\n*\n* @example\n* import resolveParentPath from '@stdlib/fs/resolve-parent-path';\n*\n* var path = resolveParentPath.sync( 'package.json' );\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport resolveParentPath from './async.js';\nimport sync from './sync.js';\n\n\n// MAIN //\n\nsetReadOnly( resolveParentPath, 'sync', sync );\n\n\n// EXPORTS //\n\nexport default resolveParentPath;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar resolve = require( 'path' ).resolve;\nimport { isPrimitive as isString } from '@stdlib/assert/is-string';\nimport isFunction from '@stdlib/assert/is-function';\nimport format from '@stdlib/string/format';\nimport cwd from '@stdlib/process/cwd';\nimport exists from './../../exists';\nimport validate from './validate.js';\n\n\n// MAIN //\n\n/**\n* Asynchronously resolves a path according to a predicate function by walking parent directories.\n*\n* @param {string} path - path to resolve\n* @param {Options} [options] - function options\n* @param {string} [options.dir] - base directory\n* @param {Function} predicate - callback which tests whether a resolved path passes a test\n* @param {Function} clbk - callback to invoke after resolving a path\n* @throws {TypeError} first argument must be a string\n* @throws {TypeError} predicate function argument must be a function\n* @throws {TypeError} callback argument must be a function\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n*\n* @example\n* resolveParentPathBy( 'package.json', predicate, onPath );\n*\n* function predicate( path, next ) {\n*     next( null, true );\n* }\n*\n* function onPath( error, path ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.log( path );\n* }\n*/\nfunction resolveParentPathBy( path, options, predicate, clbk ) {\n\tvar spath;\n\tvar child;\n\tvar test;\n\tvar opts;\n\tvar done;\n\tvar dir;\n\tvar err;\n\tif ( !isString( path ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a string. Value: `%s`.', path ) );\n\t}\n\topts = {};\n\tif ( arguments.length > 3 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t\ttest = predicate;\n\t\tdone = clbk;\n\t} else {\n\t\ttest = options;\n\t\tdone = predicate;\n\t}\n\tif ( !isFunction( test ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Predicate function must be a function. Value: `%s`.', test ) );\n\t}\n\tif ( !isFunction( done ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Callback argument must be a function. Value: `%s`.', done ) );\n\t}\n\tif ( opts.dir ) {\n\t\tdir = resolve( cwd(), opts.dir );\n\t} else {\n\t\tdir = cwd();\n\t}\n\tspath = resolve( dir, path );\n\texists( spath, onExists );\n\n\t/**\n\t* Resolves the next candidate path.\n\t*\n\t* @private\n\t* @returns {void}\n\t*/\n\tfunction next() {\n\t\t// Resolve a parent directory:\n\t\tchild = dir;\n\t\tdir = resolve( dir, '..' );\n\n\t\t// If we have already reached root, we cannot resolve any higher directories...\n\t\tif ( child === dir ) {\n\t\t\treturn done( null, null );\n\t\t}\n\t\t// Resolve the next search path:\n\t\tspath = resolve( dir, path );\n\t\texists( spath, onExists );\n\t}\n\n\t/**\n\t* Callback invoked after checking for path existence.\n\t*\n\t* @private\n\t* @param {(Error|null)} error - error object\n\t* @param {boolean} bool - boolean indicating if a path exists\n\t* @returns {void}\n\t*/\n\tfunction onExists( error, bool ) { // eslint-disable-line handle-callback-err\n\t\tif ( bool ) {\n\t\t\treturn test( spath, onTest );\n\t\t}\n\t\tnext();\n\t}\n\n\t/**\n\t* Callback invoked after testing a resolved path.\n\t*\n\t* @private\n\t* @param {(Error|null)} error - error object\n\t* @param {boolean} bool - boolean indicating if a path exists\n\t* @returns {void}\n\t*/\n\tfunction onTest( error, bool ) {\n\t\tif ( error ) {\n\t\t\treturn done( error );\n\t\t}\n\t\tif ( bool ) {\n\t\t\treturn done( null, spath );\n\t\t}\n\t\tnext();\n\t}\n}\n\n\n// EXPORTS //\n\nexport default resolveParentPathBy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar resolve = require( 'path' ).resolve;\nimport { isPrimitive as isString } from '@stdlib/assert/is-string';\nimport isFunction from '@stdlib/assert/is-function';\nimport cwd from '@stdlib/process/cwd';\nimport { sync as exists } from './../../exists';\nimport format from '@stdlib/string/format';\nimport validate from './validate.js';\n\n\n// MAIN //\n\n/**\n* Synchronously resolves a path according to a predicate function by walking parent directories.\n*\n* @param {string} path - path to resolve\n* @param {Options} [options] - function options\n* @param {string} [options.dir] - base directory\n* @param {Function} predicate - callback which tests whether a resolved path passes a test\n* @throws {TypeError} first argument must be a string\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {TypeError} last argument must be a function\n* @returns {(string|null)} resolved path or null\n*\n* @example\n* function predicate() {\n*     return true;\n* }\n*\n* var path = resolveParentPathBy( 'package.json', predicate );\n* // e.g., returns '...'\n*/\nfunction resolveParentPathBy( path, options, predicate ) {\n\tvar spath;\n\tvar child;\n\tvar test;\n\tvar opts;\n\tvar dir;\n\tvar err;\n\tif ( !isString( path ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a string. Value: `%s`.', path ) );\n\t}\n\topts = {};\n\tif ( arguments.length > 2 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t\ttest = predicate;\n\t} else {\n\t\ttest = options;\n\t}\n\tif ( !isFunction( test ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Last argument must be a function. Value: `%s`.', test ) );\n\t}\n\tif ( opts.dir ) {\n\t\tdir = resolve( cwd(), opts.dir );\n\t} else {\n\t\tdir = cwd();\n\t}\n\t// Start at a base directory and continue moving up through each parent directory until able to resolve a search path or until reaching the root directory...\n\twhile ( child !== dir ) {\n\t\tspath = resolve( dir, path );\n\t\tif ( exists( spath ) && test( spath ) ) {\n\t\t\treturn spath;\n\t\t}\n\t\tchild = dir;\n\t\tdir = resolve( dir, '..' );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default resolveParentPathBy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Resolve a path according to a predicate function by walking parent directories.\n*\n* @module @stdlib/fs/resolve-parent-path-by\n*\n* @example\n* import resolveParentPathBy from '@stdlib/fs/resolve-parent-path-by';\n*\n* resolveParentPathBy( 'package.json', predicate, onPath );\n*\n* function predicate( path, next ) {\n*     next( null, true );\n* }\n*\n* function onPath( error, path ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.log( path );\n* }\n*\n* @example\n* import resolveParentPathBy from '@stdlib/fs/resolve-parent-path-by';\n*\n* function predicate() {\n*     return true;\n* }\n*\n* var path = resolveParentPathBy.sync( 'package.json', predicate );\n* // e.g., returns '...'\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport resolveParentPathBy from './async.js';\nimport sync from './sync.js';\n\n\n// MAIN //\n\nsetReadOnly( resolveParentPathBy, 'sync', sync );\n\n\n// EXPORTS //\n\nexport default resolveParentPathBy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isObject from '@stdlib/assert/is-plain-object';\nimport hasOwnProp from '@stdlib/assert/has-own-property';\nimport { isPrimitive as isString } from '@stdlib/assert/is-string';\nimport { factory as contains } from '@stdlib/array/base/assert/contains';\nimport format from '@stdlib/string/format';\n\n\n// VARIABLES //\n\nvar isMode = contains( [ 'first', 'some', 'all', 'each' ] );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.dir] - base directory\n* @param {string} [options.mode] - operation mode\n* @returns {(Error|null)} error object or null\n*\n* @example\n* var opts = {};\n* var options = {\n*     'dir': '/foo/bar/baz',\n*     'mode': 'some'\n* };\n*\n* var err = validate( opts, options );\n* if ( err ) {\n*    throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'dir' ) ) {\n\t\topts.dir = options.dir;\n\t\tif ( !isString( opts.dir ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'dir', opts.dir ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'mode' ) ) {\n\t\topts.mode = options.mode;\n\t\tif ( !isMode( opts.mode ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a valid mode. Option: `%s`.', 'mode', opts.mode ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar resolve = require( 'path' ).resolve;\nimport { primitives as isStringArray } from '@stdlib/assert/is-string-array';\nimport isArrayLikeObject from '@stdlib/assert/is-array-like-object';\nimport isFunction from '@stdlib/assert/is-function';\nimport cwd from '@stdlib/process/cwd';\nimport exists from './../../exists';\nimport nulls from '@stdlib/array/base/nulls';\nimport format from '@stdlib/string/format';\nimport validate from './validate.js';\n\n\n// VARIABLES //\n\nvar MODES = {\n\t'first': first,\n\t'some': some,\n\t'all': all,\n\t'each': each\n};\n\n\n// FUNCTIONS //\n\n/**\n* Asynchronously resolves the first path match from a set of paths by walking parent directories.\n*\n* @private\n* @param {Array<string>} paths - paths to resolve\n* @param {string} dir - base directory\n* @param {Callback} done - callback to invoke after resolving paths\n* @returns {void}\n*/\nfunction first( paths, dir, done ) {\n\tvar child;\n\tvar spath;\n\tvar idx;\n\tvar out;\n\n\tout = [];\n\n\t// Start at a base directory and continue moving up through each parent directory...\n\tspath = resolve( dir, paths[ 0 ] );\n\n\tidx = 1; // index of next path\n\texists( spath, onExists );\n\n\t/**\n\t* Callback invoked after checking for path existence.\n\t*\n\t* @private\n\t* @param {(Error|null)} error - error object\n\t* @param {boolean} bool - boolean indicating if a path exists\n\t* @returns {void}\n\t*/\n\tfunction onExists( error, bool ) { // eslint-disable-line node/handle-callback-err\n\t\tif ( bool ) {\n\t\t\tout.push( spath );\n\t\t\treturn done( null, out );\n\t\t}\n\t\t// If we have traversed all paths at the current directory level, resolve parent directory...\n\t\tif ( idx === paths.length ) {\n\t\t\t// Resolve a parent directory:\n\t\t\tchild = dir;\n\t\t\tdir = resolve( dir, '..' );\n\n\t\t\t// If we have already reached root, we cannot resolve any higher directories...\n\t\t\tif ( child === dir ) {\n\t\t\t\treturn done( null, out );\n\t\t\t}\n\t\t\tidx = 0;\n\t\t}\n\t\tspath = resolve( dir, paths[ idx ] );\n\t\tidx += 1;\n\t\texists( spath, onExists );\n\t}\n}\n\n/**\n* Asynchronously resolves one or more paths from a set of paths at a directory level by walking parent directories.\n*\n* @private\n* @param {Array<string>} paths - paths to resolve\n* @param {string} dir - base directory\n* @param {Callback} done - callback to invoke after resolving paths\n* @returns {void}\n*/\nfunction some( paths, dir, done ) {\n\tvar child;\n\tvar spath;\n\tvar FLG;\n\tvar out;\n\n\tFLG = 0; // initialize flag to track if we are done traversing a directory level\n\tout = [];\n\n\t// Start at a base directory and continue moving up through each parent directory...\n\treturn next( dir );\n\n\t/**\n\t* Resolves paths within a directory.\n\t*\n\t* @private\n\t* @param {string} dir - directory to search\n\t*/\n\tfunction next( dir ) {\n\t\tvar i;\n\t\tfor ( i = 0; i < paths.length; i++ ) {\n\t\t\tspath = resolve( dir, paths[ i ] );\n\t\t\texists( spath, getCallback( spath ) );\n\t\t}\n\t}\n\n\t/**\n\t* Returns a callback to be invoked upon checking for path existence.\n\t*\n\t* @private\n\t* @param {string} spath - resolved path\n\t* @returns {Callback} callback\n\t*/\n\tfunction getCallback( spath ) {\n\t\treturn onExists;\n\n\t\t/**\n\t\t* Callback invoked after checking for path existence.\n\t\t*\n\t\t* @private\n\t\t* @param {(Error|null)} error - error object\n\t\t* @param {boolean} bool - boolean indicating if a path exists\n\t\t* @returns {void}\n\t\t*/\n\t\tfunction onExists( error, bool ) { // eslint-disable-line node/handle-callback-err\n\t\t\tif ( bool ) {\n\t\t\t\tout.push( spath );\n\t\t\t}\n\t\t\tFLG += 1;\n\t\t\tif ( FLG === paths.length ) {\n\t\t\t\t// Check if we have resolved any paths...\n\t\t\t\tif ( out.length > 0 ) {\n\t\t\t\t\treturn done( null, out );\n\t\t\t\t}\n\t\t\t\t// Resolve a parent directory:\n\t\t\t\tchild = dir;\n\t\t\t\tdir = resolve( dir, '..' );\n\n\t\t\t\t// Reset flag:\n\t\t\t\tFLG = 0;\n\n\t\t\t\t// If we have already reached root, we cannot resolve any higher directories...\n\t\t\t\tif ( child === dir ) {\n\t\t\t\t\treturn done( null, out );\n\t\t\t\t}\n\t\t\t\t// Resolve paths at next directory level:\n\t\t\t\treturn next( dir );\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n* Asynchronously resolves all paths from a set of paths at a directory level by walking parent directories.\n*\n* @private\n* @param {Array<string>} paths - paths to resolve\n* @param {string} dir - base directory\n* @param {Callback} done - callback to invoke after resolving paths\n* @returns {void}\n*/\nfunction all( paths, dir, done ) {\n\tvar count;\n\tvar child;\n\tvar spath;\n\tvar FLG;\n\tvar out;\n\n\tcount = 0; // initialize counter to track if we are done resolving all paths\n\tFLG = 0; // initialize flag to track if we are done traversing a directory level\n\tout = nulls( paths.length );\n\n\t// Start at a base directory and continue moving up through each parent directory...\n\treturn next( dir );\n\n\t/**\n\t* Resolves paths within a directory.\n\t*\n\t* @private\n\t* @param {string} dir - directory to search\n\t*/\n\tfunction next( dir ) {\n\t\tvar i;\n\t\tfor ( i = 0; i < paths.length; i++ ) {\n\t\t\tspath = resolve( dir, paths[ i ] );\n\t\t\texists( spath, getCallback( i, spath ) );\n\t\t}\n\t}\n\n\t/**\n\t* Returns a callback to be invoked upon checking for path existence.\n\t*\n\t* @private\n\t* @param {NonNegativeInteger} idx - index\n\t* @param {string} spath - resolved path\n\t* @returns {Callback} callback\n\t*/\n\tfunction getCallback( idx, spath ) {\n\t\treturn onExists;\n\n\t\t/**\n\t\t* Callback invoked after checking for path existence.\n\t\t*\n\t\t* @private\n\t\t* @param {(Error|null)} error - error object\n\t\t* @param {boolean} bool - boolean indicating if a path exists\n\t\t* @returns {void}\n\t\t*/\n\t\tfunction onExists( error, bool ) { // eslint-disable-line node/handle-callback-err\n\t\t\tif ( bool ) {\n\t\t\t\tout[ idx ] = spath;\n\t\t\t\tcount += 1;\n\t\t\t}\n\t\t\tFLG += 1;\n\t\t\tif ( FLG === paths.length ) {\n\t\t\t\t// Check if we have resolved any path...\n\t\t\t\tif ( count === paths.length ) {\n\t\t\t\t\treturn done( null, out );\n\t\t\t\t}\n\t\t\t\t// Resolve a parent directory:\n\t\t\t\tchild = dir;\n\t\t\t\tdir = resolve( dir, '..' );\n\n\t\t\t\t// Reset flag and buffers:\n\t\t\t\tFLG = 0;\n\t\t\t\tout = [];\n\t\t\t\tcount = 0;\n\n\t\t\t\t// If we have already reached root, we cannot resolve any higher directories...\n\t\t\t\tif ( child === dir ) {\n\t\t\t\t\treturn done( null, out );\n\t\t\t\t}\n\t\t\t\t// Resolve paths at next directory level:\n\t\t\t\treturn next( dir );\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n* Asynchronously resolves each path from a set of paths by walking parent directories.\n*\n* @private\n* @param {Array<string>} paths - paths to resolve\n* @param {string} dir - base directory\n* @param {Callback} done - callback to invoke after resolving paths\n* @returns {void}\n*/\nfunction each( paths, dir, done ) {\n\tvar count;\n\tvar child;\n\tvar spath;\n\tvar out;\n\tvar i;\n\n\tcount = 0; // initialize counter to track if we are done resolving all paths\n\tout = nulls( paths.length );\n\n\t// Start at a base directory and continue moving up through each parent directory...\n\tfor ( i = 0; i < paths.length; i++ ) {\n\t\tspath = resolve( dir, paths[ i ] );\n\t\texists( spath, getCallback( i, spath, dir ) );\n\t}\n\n\t/**\n\t* Determines whether all paths have been resolved.\n\t*\n\t* @private\n\t* @returns {void}\n\t*/\n\tfunction next() {\n\t\tcount += 1;\n\t\tif ( count === paths.length ) {\n\t\t\treturn done( null, out );\n\t\t}\n\t}\n\n\t/**\n\t* Returns a callback to be invoked upon checking for path existence.\n\t*\n\t* @private\n\t* @param {NonNegativeInteger} idx - index\n\t* @param {string} spath - resolved path\n\t* @param {string} dir - base directory\n\t* @returns {Callback} callback\n\t*/\n\tfunction getCallback( idx, spath, dir ) {\n\t\treturn onExists;\n\n\t\t/**\n\t\t* Callback invoked after checking for path existence.\n\t\t*\n\t\t* @private\n\t\t* @param {(Error|null)} error - error object\n\t\t* @param {boolean} bool - boolean indicating if a path exists\n\t\t* @returns {void}\n\t\t*/\n\t\tfunction onExists( error, bool ) { // eslint-disable-line node/handle-callback-err\n\t\t\tif ( bool ) {\n\t\t\t\tout[ idx ] = spath;\n\t\t\t\treturn next();\n\t\t\t}\n\t\t\t// Resolve a parent directory:\n\t\t\tchild = dir;\n\t\t\tdir = resolve( dir, '..' );\n\n\t\t\t// If we have already reached root, we cannot resolve any higher directories...\n\t\t\tif ( child === dir ) {\n\t\t\t\tout[ idx ] = null;\n\t\t\t\treturn next();\n\t\t\t}\n\t\t\t// Resolve path at next directory level:\n\t\t\tspath = resolve( dir, paths[ idx ] );\n\t\t\texists( spath, getCallback( idx, spath, dir ) );\n\t\t}\n\t}\n}\n\n\n// MAIN //\n\n/**\n* Asynchronously resolves paths from a set of paths by walking parent directories.\n*\n* @param {Array<string>} paths - paths to resolve\n* @param {Options} [options] - function options\n* @param {string} [options.dir] - base directory\n* @param {string} [options.mode] - mode of operation\n* @param {Callback} clbk - callback to invoke after resolving paths\n* @throws {TypeError} first argument must be an array of strings\n* @throws {TypeError} callback argument must be a function\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {void}\n*\n* @example\n* resolveParentPaths( [ 'package.json', 'package-lock.json' ], onPaths );\n*\n* function onPaths( error, paths ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.log( paths );\n* }\n*/\nfunction resolveParentPaths( paths, options, clbk ) {\n\tvar opts;\n\tvar done;\n\tvar mode;\n\tvar dir;\n\tvar fcn;\n\tvar err;\n\n\tif ( !isStringArray( paths ) ) {\n\t\tif ( isArrayLikeObject( paths ) && paths.length === 0 ) {\n\t\t\treturn [];\n\t\t}\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an array of strings. Value: `%s`.', paths ) );\n\t}\n\topts = {};\n\tif ( arguments.length > 2 ) {\n\t\tdone = clbk;\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t} else {\n\t\tdone = options;\n\t}\n\tif ( !isFunction( done ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Callback argument must be a function. Value: `%s`.', done ) );\n\t}\n\tif ( opts.dir ) {\n\t\tdir = resolve( cwd(), opts.dir );\n\t} else {\n\t\tdir = cwd();\n\t}\n\tmode = opts.mode || 'all';\n\n\tfcn = MODES[ mode ];\n\tfcn( paths, dir, done );\n}\n\n\n// EXPORTS //\n\nexport default resolveParentPaths;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar resolve = require( 'path' ).resolve;\nimport { primitives as isStringArray } from '@stdlib/assert/is-string-array';\nimport isArrayLikeObject from '@stdlib/assert/is-array-like-object';\nimport cwd from '@stdlib/process/cwd';\nimport { sync as exists } from './../../exists';\nimport nulls from '@stdlib/array/base/nulls';\nimport format from '@stdlib/string/format';\nimport validate from './validate.js';\n\n\n// VARIABLES //\n\nvar MODES = {\n\t'first': first,\n\t'some': some,\n\t'all': all,\n\t'each': each\n};\n\n\n// FUNCTIONS //\n\n/**\n* Synchronously resolves the first path match from a set of paths by walking parent directories.\n*\n* @private\n* @param {Array<string>} paths - paths to resolve\n* @param {string} dir - base directory\n* @returns {Array<string>} resolved paths\n*/\nfunction first( paths, dir ) {\n\tvar child;\n\tvar spath;\n\tvar out;\n\tvar i;\n\n\t// Start at a base directory and continue moving up through each parent directory...\n\tout = [];\n\twhile ( child !== dir ) {\n\t\tfor ( i = 0; i < paths.length; i++ ) {\n\t\t\tspath = resolve( dir, paths[ i ] );\n\t\t\tif ( exists( spath ) ) {\n\t\t\t\tout.push( spath );\n\t\t\t\treturn out;\n\t\t\t}\n\t\t}\n\t\tchild = dir;\n\t\tdir = resolve( dir, '..' );\n\t}\n\treturn out;\n}\n\n/**\n* Synchronously resolves one or more paths from a set of paths at a directory level by walking parent directories.\n*\n* @private\n* @param {Array<string>} paths - paths to resolve\n* @param {string} dir - base directory\n* @returns {Array<string>} resolved paths\n*/\nfunction some( paths, dir ) {\n\tvar child;\n\tvar spath;\n\tvar out;\n\tvar i;\n\n\t// Start at a base directory and continue moving up through each parent directory...\n\tout = [];\n\twhile ( child !== dir ) {\n\t\tfor ( i = 0; i < paths.length; i++ ) {\n\t\t\tspath = resolve( dir, paths[ i ] );\n\t\t\tif ( exists( spath ) ) {\n\t\t\t\tout.push( spath );\n\t\t\t}\n\t\t}\n\t\tif ( out.length > 0 ) {\n\t\t\treturn out;\n\t\t}\n\t\tchild = dir;\n\t\tdir = resolve( dir, '..' );\n\t}\n\treturn out;\n}\n\n/**\n* Synchronously resolves all paths from a set of paths at a directory level by walking parent directories.\n*\n* @private\n* @param {Array<string>} paths - paths to resolve\n* @param {string} dir - base directory\n* @returns {Array<string>} resolved paths\n*/\nfunction all( paths, dir ) {\n\tvar child;\n\tvar spath;\n\tvar out;\n\tvar i;\n\n\t// Start at a base directory and continue moving up through each parent directory...\n\tout = [];\n\twhile ( child !== dir ) {\n\t\tfor ( i = 0; i < paths.length; i++ ) {\n\t\t\tspath = resolve( dir, paths[ i ] );\n\t\t\tif ( exists( spath ) ) {\n\t\t\t\tout.push( spath );\n\t\t\t}\n\t\t}\n\t\tif ( out.length === paths.length ) {\n\t\t\treturn out;\n\t\t}\n\t\tout = [];\n\t\tchild = dir;\n\t\tdir = resolve( dir, '..' );\n\t}\n\treturn out;\n}\n\n/**\n* Synchronously resolves each path from a set of paths by walking parent directories.\n*\n* @private\n* @param {Array<string>} paths - paths to resolve\n* @param {string} dir - base directory\n* @returns {Array<(string|null)>} resolved paths\n*/\nfunction each( paths, dir ) {\n\tvar count;\n\tvar child;\n\tvar spath;\n\tvar out;\n\tvar i;\n\n\tcount = 0;\n\tout = nulls( paths.length );\n\n\t// Start at a base directory and continue moving up through each parent directory...\n\twhile ( child !== dir ) {\n\t\tfor ( i = 0; i < paths.length; i++ ) {\n\t\t\tif ( out[ i ] !== null ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tspath = resolve( dir, paths[ i ] );\n\t\t\tif ( exists( spath ) ) {\n\t\t\t\tout[ i ] = spath;\n\t\t\t\tcount += 1;\n\t\t\t}\n\t\t}\n\t\tif ( count === paths.length ) {\n\t\t\tbreak;\n\t\t}\n\t\tchild = dir;\n\t\tdir = resolve( dir, '..' );\n\t}\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Synchronously resolves paths from a set of paths by walking parent directories.\n*\n* @param {Array<string>} paths - paths to resolve\n* @param {Options} [options] - function options\n* @param {string} [options.dir] - base directory\n* @param {string} [options.mode='all'] - mode of operation\n* @throws {TypeError} first argument must be an array of strings\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Array<(string|null)>} resolved paths\n*\n* @example\n* var paths = resolveParentPaths( [ 'package.json', 'package-lock.json' ] );\n*/\nfunction resolveParentPaths( paths, options ) {\n\tvar opts;\n\tvar mode;\n\tvar dir;\n\tvar fcn;\n\tvar err;\n\n\tif ( !isStringArray( paths ) ) {\n\t\tif ( isArrayLikeObject( paths ) && paths.length === 0 ) {\n\t\t\treturn [];\n\t\t}\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an array of strings. Value: `%s`.', paths ) );\n\t}\n\topts = {};\n\tif ( arguments.length > 1 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( opts.dir ) {\n\t\tdir = resolve( cwd(), opts.dir );\n\t} else {\n\t\tdir = cwd();\n\t}\n\tmode = opts.mode || 'all';\n\n\tfcn = MODES[ mode ];\n\treturn fcn( paths, dir );\n}\n\n\n// EXPORTS //\n\nexport default resolveParentPaths;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Resolve paths from a set of paths by walking parent directories.\n*\n* @module @stdlib/fs/resolve-parent-paths\n*\n* @example\n* import resolveParentPaths from '@stdlib/fs/resolve-parent-paths';\n*\n* resolveParentPaths( [ 'package.json', 'package-lock.json' ], onPaths );\n*\n* function onPaths( error, paths ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.log( paths );\n* }\n*\n* @example\n* import resolveParentPaths from '@stdlib/fs/resolve-parent-paths';\n*\n* var paths = resolveParentPaths.sync( [ 'package.json', 'package-lock.json' ] );\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport sync from './sync.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'sync', sync );\n\n\n// EXPORTS //\n\nexport default main;\n\n// exports: { \"sync\": \"main.sync\" }\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar remove = require( 'fs' ).unlink;\n\n\n// MAIN //\n\n/**\n* Asynchronously removes a directory entry.\n*\n* @param {(string|Buffer|integer)} path - entry path\n* @param {Function} clbk - callback to invoke after removing a directory entry\n*\n* @example\n* function done( error ) {\n*     if ( error ) {\n*         throw error;\n*     }\n* }\n*\n* unlink( './beep/boop.txt', done );\n*/\nfunction unlink( path, clbk ) {\n\tremove( path, clbk );\n}\n\n\n// EXPORTS //\n\nexport default unlink;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar unlink = require( 'fs' ).unlinkSync; // eslint-disable-line node/no-sync\n\n\n// MAIN //\n\n/**\n* Synchronously removes a directory entry.\n*\n* @param {(string|Buffer|integer)} path - path\n* @returns {(Error|null)} error object or null\n*\n* @example\n* var err = unlinkSync( './beep/boop.txt' );\n* if ( err instanceof Error ) {\n*     throw err;\n* }\n*/\nfunction unlinkSync( path ) {\n\ttry {\n\t\tunlink( path );\n\t} catch ( err ) {\n\t\treturn err;\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default unlinkSync;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Remove a directory entry.\n*\n* @module @stdlib/fs/unlink\n*\n* @example\n* import unlink from '@stdlib/fs/unlink';\n*\n* function done( error ) {\n*     if ( error ) {\n*         throw error;\n*     }\n* }\n*\n* unlink( './beep/boop.txt', done );\n*\n* @example\n* import { sync as unlinkSync } from '@stdlib/fs/unlink';\n*\n* var err = unlinkSync( './beep/boop.txt' );\n* if ( err instanceof Error ) {\n*     throw err;\n* }\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport sync from './sync.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'sync', sync );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar write = require( 'fs' ).writeFile;\n\n\n// MAIN //\n\n/**\n* Asynchronously writes data to a file.\n*\n* @param {(string|Buffer|integer)} file - file path or file descriptor\n* @param {(string|Buffer)} data - data to write\n* @param {(Object|string)} [options] - options\n* @param {Function} clbk - callback to invoke after writing data to a file\n*\n* @example\n* function onWrite( error ) {\n*     if ( error ) {\n*         throw error;\n*     }\n* }\n*\n* writeFile( './beep/boop.txt', 'beep boop\\n', onWrite );\n*/\nfunction writeFile() {\n\tvar args;\n\tvar i;\n\targs = [];\n\tfor ( i = 0; i < arguments.length; i++ ) {\n\t\targs.push( arguments[ i ] );\n\t}\n\twrite.apply( null, args );\n}\n\n\n// EXPORTS //\n\nexport default writeFile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar writeFile = require( 'fs' ).writeFileSync; // eslint-disable-line node/no-sync\n\n\n// MAIN //\n\n/**\n* Synchronously writes data to a file.\n*\n* @param {(string|Buffer|integer)} file - file path or file descriptor\n* @param {(string|Buffer)} data - data to write\n* @param {(Object|string)} [options] - options\n* @returns {(Error|null)} error object or null\n*\n* @example\n* var err = writeFileSync( './beep/boop.txt', 'beep boop\\n' );\n* if ( err instanceof Error ) {\n*     throw err;\n* }\n*/\nfunction writeFileSync( file, data, options ) {\n\ttry {\n\t\tif ( arguments.length > 2 ) {\n\t\t\twriteFile( file, data, options );\n\t\t} else {\n\t\t\twriteFile( file, data );\n\t\t}\n\t} catch ( err ) {\n\t\treturn err;\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default writeFileSync;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Write data to a file.\n*\n* @module @stdlib/fs/write-file\n*\n* @example\n* import writeFile from '@stdlib/fs/write-file';\n*\n* function onWrite( error ) {\n*     if ( error ) {\n*         throw error;\n*     }\n* }\n*\n* writeFile( './beep/boop.txt', 'beep boop\\n', onWrite );\n*\n* @example\n* import { sync as writeFileSync } from '@stdlib/fs/write-file';\n*\n* var err = writeFileSync( './beep/boop.txt', 'beep boop\\n' );\n* if ( err instanceof Error ) {\n*     throw err;\n* }\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport sync from './sync.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'sync', sync );\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace fs\n*/\nvar fs = {};\n\n/**\n* @name appendFile\n* @memberof fs\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/fs/append-file}\n*/\nimport appendFile from './../append-file';\nsetReadOnly( fs, 'appendFile', appendFile );\n\n/**\n* @name close\n* @memberof fs\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/fs/close}\n*/\nimport close from './../close';\nsetReadOnly( fs, 'close', close );\n\n/**\n* @name exists\n* @memberof fs\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/fs/exists}\n*/\nimport exists from './../exists';\nsetReadOnly( fs, 'exists', exists );\n\n/**\n* @name open\n* @memberof fs\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/fs/open}\n*/\nimport open from './../open';\nsetReadOnly( fs, 'open', open );\n\n/**\n* @name readDir\n* @memberof fs\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/fs/read-dir}\n*/\nimport readDir from './../read-dir';\nsetReadOnly( fs, 'readDir', readDir );\n\n/**\n* @name readFile\n* @memberof fs\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/fs/read-file}\n*/\nimport readFile from './../read-file';\nsetReadOnly( fs, 'readFile', readFile );\n\n/**\n* @name readFileList\n* @memberof fs\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/fs/read-file-list}\n*/\nimport readFileList from './../read-file-list';\nsetReadOnly( fs, 'readFileList', readFileList );\n\n/**\n* @name readJSON\n* @memberof fs\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/fs/read-json}\n*/\nimport readJSON from './../read-json';\nsetReadOnly( fs, 'readJSON', readJSON );\n\n/**\n* @name readNDJSON\n* @memberof fs\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/fs/read-ndjson}\n*/\nimport readNDJSON from './../read-ndjson';\nsetReadOnly( fs, 'readNDJSON', readNDJSON );\n\n/**\n* @name readWASM\n* @memberof fs\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/fs/read-wasm}\n*/\nimport readWASM from './../read-wasm';\nsetReadOnly( fs, 'readWASM', readWASM );\n\n/**\n* @name rename\n* @memberof fs\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/fs/rename}\n*/\nimport rename from './../rename';\nsetReadOnly( fs, 'rename', rename );\n\n/**\n* @name resolveParentPath\n* @memberof fs\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/fs/resolve-parent-path}\n*/\nimport resolveParentPath from './../resolve-parent-path';\nsetReadOnly( fs, 'resolveParentPath', resolveParentPath );\n\n/**\n* @name resolveParentPathBy\n* @memberof fs\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/fs/resolve-parent-path-by}\n*/\nimport resolveParentPathBy from './../resolve-parent-path-by';\nsetReadOnly( fs, 'resolveParentPathBy', resolveParentPathBy );\n\n/**\n* @name resolveParentPaths\n* @memberof fs\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/fs/resolve-parent-paths}\n*/\nimport resolveParentPaths from './../resolve-parent-paths';\nsetReadOnly( fs, 'resolveParentPaths', resolveParentPaths );\n\n/**\n* @name unlink\n* @memberof fs\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/fs/unlink}\n*/\nimport unlink from './../unlink';\nsetReadOnly( fs, 'unlink', unlink );\n\n/**\n* @name writeFile\n* @memberof fs\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/fs/write-file}\n*/\nimport writeFile from './../write-file';\nsetReadOnly( fs, 'writeFile', writeFile );\n\n\n// EXPORTS //\n\nexport default fs;\n"],"names":["append","require$$0","appendFile","args","i","arguments","length","push","apply","appendFileSync","setReadOnly","async","path","data","options","err","native","close","fd","clbk","isNonNegativeInteger","TypeError","format","isFunction","closeSync","main","fcn","fs","exists","error","access","stat","existsSync","accessSync","statSync","sync","op","open","flags","mode","nargs","defaults","openSync","readdir","readDir","readdirSync","readfile","readFile","readfileSync","readFileSync","file","f","cancelTimeout","clearTimeout","debug","MAX_RETRIES","config","MAX_DELAY","readFileList","list","pending","results","errFLG","count","opts","len","cb","isStringArray","isString","assign","Array","getCallback","idx","retries","k","retry","onRead","d","message","code","done","Error","max","pow","delay","setTimeout","keys","objectKeys","clearPending","readJSON","encoding","isObject","toString","removeBOM","reviver","parseJSON","instanceOf","readNDJSON","parseNDJSON","readWASM","out","isUint8Array","Uint8Array","rename","oldPath","newPath","renameSync","validate","hasOwnProp","dir","resolve","resolveParentPath","spath","child","cwd","onExists","bool","resolveParentPathBy","predicate","test","next","onTest","isMode","contains","MODES","first","paths","some","FLG","all","nulls","each","resolveParentPaths","isArrayLikeObject","remove","unlink","unlinkSync","write","writeFile","writeFileSync"],"mappings":"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"}